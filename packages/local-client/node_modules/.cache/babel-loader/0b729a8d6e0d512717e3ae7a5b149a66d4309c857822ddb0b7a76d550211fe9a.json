{"ast":null,"code":"(function (Prism) {\n  Prism.languages.scheme = {\n    // this supports \"normal\" single-line comments:\n    //   ; comment\n    // and (potentially nested) multiline comments:\n    //   #| comment #| nested |# still comment |#\n    // (only 1 level of nesting is supported)\n    'comment': /;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n    'string': {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    'symbol': {\n      pattern: /'[^()\\[\\]#'\\s]+/,\n      greedy: true\n    },\n    'character': {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,\n      greedy: true,\n      alias: 'string'\n    },\n    'lambda-parameter': [\n    // https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n    {\n      pattern: /((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n      lookbehind: true\n    }, {\n      pattern: /((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,\n      lookbehind: true\n    }],\n    'keyword': {\n      pattern: /((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true\n    },\n    'builtin': {\n      // all functions of the base library of R7RS plus some of built-ins of R5Rs\n      pattern: /((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true\n    },\n    'operator': {\n      pattern: /((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true\n    },\n    'number': {\n      // The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).\n      //\n      // <number>      := <num 2>|<num 8>|<num 10>|<num 16>\n      // <num R>       := <prefix R><complex R>\n      // <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>\n      // <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\\.0)?i\n      // <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\\.0\n      // <ureal R>     := <uint R>(?:\\/<uint R>)?\n      //                | <decimal R>\n      //\n      // <decimal 10>  := (?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?\n      // <uint R>      := <digit R>+\n      // <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>\n      // <radix 2>     := #b\n      // <radix 8>     := #o\n      // <radix 10>    := (?:#d)?\n      // <radix 16>    := #x\n      // <digit 2>     := [01]\n      // <digit 8>     := [0-7]\n      // <digit 10>    := \\d\n      // <digit 16>    := [0-9a-f]\n      //\n      // The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all\n      // non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)\n      // pattern:\n      pattern: RegExp(SortedBNF({\n        '<ureal dec>': /\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/.source,\n        '<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\\.0/.source,\n        '<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\\.0)?i/.source,\n        '<complex dec>': /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,\n        '<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,\n        '<ureal box>': /[0-9a-f]+(?:\\/[0-9a-f]+)?/.source,\n        '<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\\.0/.source,\n        '<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\\.0)?i/.source,\n        '<complex box>': /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,\n        '<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,\n        '<number>': /(^|[()\\[\\]\\s])(?:<num dec>|<num box>)(?=[()\\[\\]\\s]|$)/.source\n      }), 'i'),\n      lookbehind: true\n    },\n    'boolean': {\n      pattern: /(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true\n    },\n    'function': {\n      pattern: /((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true\n    },\n    'identifier': {\n      pattern: /(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'punctuation': /[()\\[\\]']/\n  };\n\n  /**\r\n   * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.\r\n   *\r\n   * @param {Record<string, string>} grammar\r\n   * @returns {string}\r\n   */\n  function SortedBNF(grammar) {\n    for (var key in grammar) {\n      grammar[key] = grammar[key].replace(/<[\\w\\s]+>/g, function (key) {\n        return '(?:' + grammar[key].trim() + ')';\n      });\n    }\n    // return the last item\n    return grammar[key];\n  }\n})(Prism);","map":{"version":3,"names":["Prism","languages","scheme","pattern","greedy","alias","lookbehind","RegExp","SortedBNF","source","grammar","key","replace","trim"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-scheme.js"],"sourcesContent":["(function (Prism) {\r\n\tPrism.languages.scheme = {\r\n\t\t// this supports \"normal\" single-line comments:\r\n\t\t//   ; comment\r\n\t\t// and (potentially nested) multiline comments:\r\n\t\t//   #| comment #| nested |# still comment |#\r\n\t\t// (only 1 level of nesting is supported)\r\n\t\t'comment': /;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\r\n\t\t'string': {\r\n\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'symbol': {\r\n\t\t\tpattern: /'[^()\\[\\]#'\\s]+/,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'character': {\r\n\t\t\tpattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,\r\n\t\t\tgreedy: true,\r\n\t\t\talias: 'string'\r\n\t\t},\r\n\t\t'lambda-parameter': [\r\n\t\t\t// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\r\n\t\t\t{\r\n\t\t\t\tpattern: /((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpattern: /((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t}\r\n\t\t],\r\n\t\t'keyword': {\r\n\t\t\tpattern: /((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'builtin': {\r\n\t\t\t// all functions of the base library of R7RS plus some of built-ins of R5Rs\r\n\t\t\tpattern: /((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'operator': {\r\n\t\t\tpattern: /((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'number': {\r\n\t\t\t// The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).\r\n\t\t\t//\r\n\t\t\t// <number>      := <num 2>|<num 8>|<num 10>|<num 16>\r\n\t\t\t// <num R>       := <prefix R><complex R>\r\n\t\t\t// <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>\r\n\t\t\t// <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\\.0)?i\r\n\t\t\t// <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\\.0\r\n\t\t\t// <ureal R>     := <uint R>(?:\\/<uint R>)?\r\n\t\t\t//                | <decimal R>\r\n\t\t\t//\r\n\t\t\t// <decimal 10>  := (?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?\r\n\t\t\t// <uint R>      := <digit R>+\r\n\t\t\t// <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>\r\n\t\t\t// <radix 2>     := #b\r\n\t\t\t// <radix 8>     := #o\r\n\t\t\t// <radix 10>    := (?:#d)?\r\n\t\t\t// <radix 16>    := #x\r\n\t\t\t// <digit 2>     := [01]\r\n\t\t\t// <digit 8>     := [0-7]\r\n\t\t\t// <digit 10>    := \\d\r\n\t\t\t// <digit 16>    := [0-9a-f]\r\n\t\t\t//\r\n\t\t\t// The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all\r\n\t\t\t// non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)\r\n\t\t\t// pattern:\r\n\t\t\tpattern: RegExp(SortedBNF({\r\n\t\t\t\t'<ureal dec>': /\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/.source,\r\n\t\t\t\t'<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\\.0/.source,\r\n\t\t\t\t'<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\\.0)?i/.source,\r\n\t\t\t\t'<complex dec>': /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,\r\n\t\t\t\t'<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,\r\n\r\n\t\t\t\t'<ureal box>': /[0-9a-f]+(?:\\/[0-9a-f]+)?/.source,\r\n\t\t\t\t'<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\\.0/.source,\r\n\t\t\t\t'<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\\.0)?i/.source,\r\n\t\t\t\t'<complex box>': /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,\r\n\t\t\t\t'<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,\r\n\r\n\t\t\t\t'<number>': /(^|[()\\[\\]\\s])(?:<num dec>|<num box>)(?=[()\\[\\]\\s]|$)/.source,\r\n\t\t\t}), 'i'),\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'boolean': {\r\n\t\t\tpattern: /(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'function': {\r\n\t\t\tpattern: /((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'identifier': {\r\n\t\t\tpattern: /(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'punctuation': /[()\\[\\]']/\r\n\t};\r\n\r\n\t/**\r\n\t * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.\r\n\t *\r\n\t * @param {Record<string, string>} grammar\r\n\t * @returns {string}\r\n\t */\r\n\tfunction SortedBNF(grammar) {\r\n\t\tfor (var key in grammar) {\r\n\t\t\tgrammar[key] = grammar[key].replace(/<[\\w\\s]+>/g, function (key) {\r\n\t\t\t\treturn '(?:' + grammar[key].trim() + ')';\r\n\t\t\t});\r\n\t\t}\r\n\t\t// return the last item\r\n\t\treturn grammar[key];\r\n\t}\r\n\r\n}(Prism));\r\n"],"mappings":"AAAC,WAAUA,KAAK,EAAE;EACjBA,KAAK,CAACC,SAAS,CAACC,MAAM,GAAG;IACxB;IACA;IACA;IACA;IACA;IACA,SAAS,EAAE,wIAAwI;IACnJ,QAAQ,EAAE;MACTC,OAAO,EAAE,mBAAmB;MAC5BC,MAAM,EAAE;IACT,CAAC;IACD,QAAQ,EAAE;MACTD,OAAO,EAAE,iBAAiB;MAC1BC,MAAM,EAAE;IACT,CAAC;IACD,WAAW,EAAE;MACZD,OAAO,EAAE,yEAAyE;MAClFC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE;IACR,CAAC;IACD,kBAAkB,EAAE;IACnB;IACA;MACCF,OAAO,EAAE,oEAAoE;MAC7EG,UAAU,EAAE;IACb,CAAC,EACD;MACCH,OAAO,EAAE,8CAA8C;MACvDG,UAAU,EAAE;IACb,CAAC,CACD;IACD,SAAS,EAAE;MACVH,OAAO,EAAE,oZAAoZ;MAC7ZG,UAAU,EAAE;IACb,CAAC;IACD,SAAS,EAAE;MACV;MACAH,OAAO,EAAE,yoDAAyoD;MAClpDG,UAAU,EAAE;IACb,CAAC;IACD,UAAU,EAAE;MACXH,OAAO,EAAE,2DAA2D;MACpEG,UAAU,EAAE;IACb,CAAC;IACD,QAAQ,EAAE;MACT;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAH,OAAO,EAAEI,MAAM,CAACC,SAAS,CAAC;QACzB,aAAa,EAAE,oDAAoD,CAACC,MAAM;QAC1E,YAAY,EAAE,qCAAqC,CAACA,MAAM;QAC1D,iBAAiB,EAAE,sCAAsC,CAACA,MAAM;QAChE,eAAe,EAAE,4DAA4D,CAACA,MAAM;QACpF,WAAW,EAAE,6CAA6C,CAACA,MAAM;QAEjE,aAAa,EAAE,2BAA2B,CAACA,MAAM;QACjD,YAAY,EAAE,qCAAqC,CAACA,MAAM;QAC1D,iBAAiB,EAAE,sCAAsC,CAACA,MAAM;QAChE,eAAe,EAAE,4DAA4D,CAACA,MAAM;QACpF,WAAW,EAAE,gDAAgD,CAACA,MAAM;QAEpE,UAAU,EAAE,uDAAuD,CAACA;MACrE,CAAC,CAAC,EAAE,GAAG,CAAC;MACRH,UAAU,EAAE;IACb,CAAC;IACD,SAAS,EAAE;MACVH,OAAO,EAAE,oDAAoD;MAC7DG,UAAU,EAAE;IACb,CAAC;IACD,UAAU,EAAE;MACXH,OAAO,EAAE,2EAA2E;MACpFG,UAAU,EAAE;IACb,CAAC;IACD,YAAY,EAAE;MACbH,OAAO,EAAE,mDAAmD;MAC5DG,UAAU,EAAE,IAAI;MAChBF,MAAM,EAAE;IACT,CAAC;IACD,aAAa,EAAE;EAChB,CAAC;;EAED;AACD;AACA;AACA;AACA;AACA;EACC,SAASI,SAASA,CAACE,OAAO,EAAE;IAC3B,KAAK,IAAIC,GAAG,IAAID,OAAO,EAAE;MACxBA,OAAO,CAACC,GAAG,CAAC,GAAGD,OAAO,CAACC,GAAG,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,UAAUD,GAAG,EAAE;QAChE,OAAO,KAAK,GAAGD,OAAO,CAACC,GAAG,CAAC,CAACE,IAAI,EAAE,GAAG,GAAG;MACzC,CAAC,CAAC;IACH;IACA;IACA,OAAOH,OAAO,CAACC,GAAG,CAAC;EACpB;AAED,CAAC,EAACX,KAAK,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}