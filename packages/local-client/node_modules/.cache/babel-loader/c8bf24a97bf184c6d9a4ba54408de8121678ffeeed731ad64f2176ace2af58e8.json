{"ast":null,"code":"(function (Prism) {\n  var comment_inside = {\n    'function': /\\b(?:TODOS?|FIX(?:MES?)?|NOTES?|BUGS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n  };\n  var string_inside = {\n    'number': /\\\\[^\\s']|%\\w/\n  };\n  var factor = {\n    'comment': [{\n      // ! single-line exclamation point comments with whitespace after/around the !\n      pattern: /(^|\\s)(?:! .*|!$)/,\n      lookbehind: true,\n      inside: comment_inside\n    }, /* from basis/multiline: */\n    {\n      // /* comment */, /* comment*/\n      pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      inside: comment_inside\n    }, {\n      // ![[ comment ]] , ![===[ comment]===]\n      pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      inside: comment_inside\n    }],\n    'number': [{\n      // basic base 10 integers 9, -9\n      pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n      pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n      lookbehind: true\n    }, {\n      // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n      pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // positive mixed numbers 23+1/5 +23+1/5\n      pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // negative mixed numbers -23-1/5\n      pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n      // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n      pattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n      lookbehind: true\n    }, {\n      // NAN literal syntax NAN: 80000deadbeef, NAN: a\n      pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      /*\r\n      \tbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\r\n      \t\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\r\n      \tThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\r\n      \t<https://docs.factorcode.org/content/article-syntax-floats.html>\r\n      */\n      pattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n      lookbehind: true\n    }],\n    // R/ regexp?\\/\\\\/\n    'regexp': {\n      pattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'number',\n      inside: {\n        'variable': /\\\\\\S/,\n        'keyword': /[+?*\\[\\]^$(){}.|]/,\n        'operator': {\n          pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n          lookbehind: true\n        }\n      }\n    },\n    'boolean': {\n      pattern: /(^|\\s)[tf](?=\\s|$)/,\n      lookbehind: true\n    },\n    // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n    'custom-string': {\n      pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'number': /\\\\\\S|%\\w|\\//\n      }\n    },\n    'multiline-string': [{\n      // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n      pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'number': string_inside.number,\n        // trailing semicolon on its own line\n        'semicolon-or-setlocal': {\n          pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n          lookbehind: true,\n          alias: 'function'\n        }\n      }\n    }, {\n      // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n      pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: string_inside\n    }, {\n      // [[ string ]], [==[ string]==]\n      pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: string_inside\n    }],\n    'special-using': {\n      pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n      lookbehind: true,\n      alias: 'function',\n      inside: {\n        // this is essentially a regex for vocab names, which i don't want to specify\n        // but the USING: gets picked up as a vocab name\n        'string': {\n          pattern: /(\\s)[^:\\s]+/,\n          lookbehind: true\n        }\n      }\n    },\n    /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\r\n    \ttrying to do better is more work and regex-computation-time than it's worth though.\r\n    \t- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\r\n    \t- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\r\n    \t- we'd like if the following variable name conventions were recognised specifically:\r\n    \t\tspecial row variables = ..a b..\r\n    \t\ttype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\r\n    \t\tword throws unconditional error = *\r\n    \t\tany other word-like variable name = a ? q' etc\r\n    \t\t\thttps://docs.factorcode.org/content/article-effects.html\r\n    \t\t\tthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\r\n    \tthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\r\n    */\n\n    // current solution is not great\n    'stack-effect-delimiter': [{\n      // opening parenthesis\n      pattern: /(^|\\s)(?:call|execute|eval)?\\((?=\\s)/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // middle --\n      pattern: /(\\s)--(?=\\s)/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // closing parenthesis\n      pattern: /(\\s)\\)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    'combinators': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'kernel-builtin': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'sequences-builtin': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'math-builtin': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'constructor-word': {\n      // <array> but not <=>\n      pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'other-builtin-syntax': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    /*\r\n    \tfull list of supported word naming conventions: (the convention appears outside of the [brackets])\r\n    \t\tset-[x]\r\n    \t\tchange-[x]\r\n    \t\twith-[x]\r\n    \t\tnew-[x]\r\n    \t\t>[string]\r\n    \t\t[base]>\r\n    \t\t[string]>[number]\r\n    \t\t+[symbol]+\r\n    \t\t[boolean-word]?\r\n    \t\t?[of]\r\n    \t\t[slot-reader]>>\r\n    \t\t>>[slot-setter]\r\n    \t\t[slot-writer]<<\r\n    \t\t([implementation-detail])\r\n    \t\t[mutater]!\r\n    \t\t[variant]*\r\n    \t\t[prettyprint].\r\n    \t\t$[help-markup]\r\n    \t\t\t<constructors>, SYNTAX:, etc are supported by their own patterns.\r\n    \t\t\t`with` and `new` from `kernel` are their own builtins.\r\n    \t\t\tsee <https://docs.factorcode.org/content/article-conventions.html>\r\n    */\n    'conventionally-named-word': {\n      pattern: /(^|\\s)(?!\")(?:(?:set|change|with|new)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'colon-syntax': {\n      pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'function'\n    },\n    'semicolon-or-setlocal': {\n      pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n    'curly-brace-literal-delimiter': [{\n      // opening\n      pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // closing\n      pattern: /(\\s)\\}(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n    'quotation-delimiter': [{\n      // opening\n      pattern: /(^|\\s)\\[(?=\\s)/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // closing\n      pattern: /(\\s)\\](?=\\s|$)/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    'normal-word': {\n      pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n      lookbehind: true\n    },\n    /*\r\n    \tbasic first-class string \"a\"\r\n    \t\twith escaped double-quote \"a\\\"\"\r\n    \t\tescaped backslash \"\\\\\"\r\n    \t\tand general escapes since Factor has so many \"\\N\"\r\n    \t\t\tsyntax that works in the reference implementation that isn't fully\r\n    \tsupported because it's an implementation detail:\r\n    \t\t\"string 1\"\"string 2\" -> 2 strings (works anyway)\r\n    \t\t\"string\"5 -> string, 5\r\n    \t\t\"string\"[ ] -> string, quotation\r\n    \t\t{ \"a\"} -> array<string>\r\n    \t\t\tthe rest of those examples all properly recognise the string, but not\r\n    \t\tthe other object (number, quotation, etc)\r\n    \tthis is fine for a regex-only implementation.\r\n    */\n    'string': {\n      pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n      greedy: true,\n      inside: string_inside\n    }\n  };\n  var escape = function (str) {\n    return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1');\n  };\n  var arrToWordsRegExp = function (arr) {\n    return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)');\n  };\n  var builtins = {\n    'kernel-builtin': ['or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'],\n    'other-builtin-syntax': [\n    // syntax\n    '=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\\\', 'B', 'PRIVATE>', '\\\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable',\n    // literals\n    '$', '$[', '${'],\n    'sequences-builtin': ['member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'],\n    'math-builtin': ['number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator']\n    // that's all for now\n  };\n\n  Object.keys(builtins).forEach(function (k) {\n    factor[k].pattern = arrToWordsRegExp(builtins[k]);\n  });\n  var combinators = [\n  // kernel\n  '2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@',\n  // sequences\n  'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index',\n  // math\n  'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?',\n  // math.combinators\n  'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative',\n  // combinators\n  'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot',\n  // combinators.short-circuit\n  '2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&',\n  // combinators.smart\n  'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence'\n  // tafn\n  ];\n\n  factor.combinators.pattern = arrToWordsRegExp(combinators);\n  Prism.languages.factor = factor;\n})(Prism);","map":{"version":3,"names":["Prism","comment_inside","string_inside","factor","pattern","lookbehind","inside","greedy","alias","number","escape","str","replace","arrToWordsRegExp","arr","RegExp","map","join","builtins","Object","keys","forEach","k","combinators","languages"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-factor.js"],"sourcesContent":["(function (Prism) {\r\n\r\n\tvar comment_inside = {\r\n\t\t'function': /\\b(?:TODOS?|FIX(?:MES?)?|NOTES?|BUGS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\r\n\t};\r\n\tvar string_inside = {\r\n\t\t'number': /\\\\[^\\s']|%\\w/\r\n\t};\r\n\r\n\tvar factor = {\r\n\t\t'comment': [\r\n\t\t\t{\r\n\t\t\t\t// ! single-line exclamation point comments with whitespace after/around the !\r\n\t\t\t\tpattern: /(^|\\s)(?:! .*|!$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: comment_inside\r\n\t\t\t},\r\n\r\n\t\t\t/* from basis/multiline: */\r\n\t\t\t{\r\n\t\t\t\t// /* comment */, /* comment*/\r\n\t\t\t\tpattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\tinside: comment_inside\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// ![[ comment ]] , ![===[ comment]===]\r\n\t\t\t\tpattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\tinside: comment_inside\r\n\t\t\t}\r\n\t\t],\r\n\r\n\t\t'number': [\r\n\t\t\t{\r\n\t\t\t\t// basic base 10 integers 9, -9\r\n\t\t\t\tpattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\r\n\t\t\t\tpattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\r\n\t\t\t\tpattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// positive mixed numbers 23+1/5 +23+1/5\r\n\t\t\t\tpattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// negative mixed numbers -23-1/5\r\n\t\t\t\tpattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\r\n\t\t\t\t// and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\r\n\t\t\t\tpattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// NAN literal syntax NAN: 80000deadbeef, NAN: a\r\n\t\t\t\tpattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t/*\r\n\t\t\t\t\tbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\r\n\t\t\t\t\t\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\r\n\t\t\t\t\tThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\r\n\t\t\t\t\t<https://docs.factorcode.org/content/article-syntax-floats.html>\r\n\t\t\t\t*/\r\n\t\t\t\tpattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t}\r\n\t\t],\r\n\r\n\t\t// R/ regexp?\\/\\\\/\r\n\t\t'regexp': {\r\n\t\t\tpattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'number',\r\n\t\t\tinside: {\r\n\t\t\t\t'variable': /\\\\\\S/,\r\n\t\t\t\t'keyword': /[+?*\\[\\]^$(){}.|]/,\r\n\t\t\t\t'operator': {\r\n\t\t\t\t\tpattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t'boolean': {\r\n\t\t\tpattern: /(^|\\s)[tf](?=\\s|$)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\r\n\t\t// SBUF\" asd\", URL\" ://...\", P\" /etc/\"\r\n\t\t'custom-string': {\r\n\t\t\tpattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\talias: 'string',\r\n\t\t\tinside: {\r\n\t\t\t\t'number': /\\\\\\S|%\\w|\\//\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t'multiline-string': [\r\n\t\t\t{\r\n\t\t\t\t// STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\r\n\t\t\t\tpattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\talias: 'string',\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'number': string_inside.number,\r\n\t\t\t\t\t// trailing semicolon on its own line\r\n\t\t\t\t\t'semicolon-or-setlocal': {\r\n\t\t\t\t\t\tpattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\r\n\t\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\t\talias: 'function'\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\r\n\t\t\t\tpattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\talias: 'string',\r\n\t\t\t\tinside: string_inside\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// [[ string ]], [==[ string]==]\r\n\t\t\t\tpattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\talias: 'string',\r\n\t\t\t\tinside: string_inside\r\n\t\t\t}\r\n\t\t],\r\n\r\n\t\t'special-using': {\r\n\t\t\tpattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'function',\r\n\t\t\tinside: {\r\n\t\t\t\t// this is essentially a regex for vocab names, which i don't want to specify\r\n\t\t\t\t// but the USING: gets picked up as a vocab name\r\n\t\t\t\t'string': {\r\n\t\t\t\t\tpattern: /(\\s)[^:\\s]+/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\r\n\t\t\ttrying to do better is more work and regex-computation-time than it's worth though.\r\n\t\t\t- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\r\n\t\t\t- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\r\n\t\t\t- we'd like if the following variable name conventions were recognised specifically:\r\n\t\t\t\tspecial row variables = ..a b..\r\n\t\t\t\ttype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\r\n\t\t\t\tword throws unconditional error = *\r\n\t\t\t\tany other word-like variable name = a ? q' etc\r\n\r\n\t\t\thttps://docs.factorcode.org/content/article-effects.html\r\n\r\n\t\t\tthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\r\n\t\t\tthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\r\n\t\t*/\r\n\r\n\t\t// current solution is not great\r\n\t\t'stack-effect-delimiter': [\r\n\t\t\t{\r\n\t\t\t\t// opening parenthesis\r\n\t\t\t\tpattern: /(^|\\s)(?:call|execute|eval)?\\((?=\\s)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'operator'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// middle --\r\n\t\t\t\tpattern: /(\\s)--(?=\\s)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'operator'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// closing parenthesis\r\n\t\t\t\tpattern: /(\\s)\\)(?=\\s|$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'operator'\r\n\t\t\t}\r\n\t\t],\r\n\r\n\t\t'combinators': {\r\n\t\t\tpattern: null,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'keyword'\r\n\t\t},\r\n\r\n\t\t'kernel-builtin': {\r\n\t\t\tpattern: null,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'variable'\r\n\t\t},\r\n\r\n\t\t'sequences-builtin': {\r\n\t\t\tpattern: null,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'variable'\r\n\t\t},\r\n\r\n\t\t'math-builtin': {\r\n\t\t\tpattern: null,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'variable'\r\n\t\t},\r\n\r\n\t\t'constructor-word': {\r\n\t\t\t// <array> but not <=>\r\n\t\t\tpattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'keyword'\r\n\t\t},\r\n\r\n\t\t'other-builtin-syntax': {\r\n\t\t\tpattern: null,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'operator'\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t\tfull list of supported word naming conventions: (the convention appears outside of the [brackets])\r\n\t\t\t\tset-[x]\r\n\t\t\t\tchange-[x]\r\n\t\t\t\twith-[x]\r\n\t\t\t\tnew-[x]\r\n\t\t\t\t>[string]\r\n\t\t\t\t[base]>\r\n\t\t\t\t[string]>[number]\r\n\t\t\t\t+[symbol]+\r\n\t\t\t\t[boolean-word]?\r\n\t\t\t\t?[of]\r\n\t\t\t\t[slot-reader]>>\r\n\t\t\t\t>>[slot-setter]\r\n\t\t\t\t[slot-writer]<<\r\n\t\t\t\t([implementation-detail])\r\n\t\t\t\t[mutater]!\r\n\t\t\t\t[variant]*\r\n\t\t\t\t[prettyprint].\r\n\t\t\t\t$[help-markup]\r\n\r\n\t\t\t<constructors>, SYNTAX:, etc are supported by their own patterns.\r\n\r\n\t\t\t`with` and `new` from `kernel` are their own builtins.\r\n\r\n\t\t\tsee <https://docs.factorcode.org/content/article-conventions.html>\r\n\t\t*/\r\n\t\t'conventionally-named-word': {\r\n\t\t\tpattern: /(^|\\s)(?!\")(?:(?:set|change|with|new)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'keyword'\r\n\t\t},\r\n\r\n\t\t'colon-syntax': {\r\n\t\t\tpattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\talias: 'function'\r\n\t\t},\r\n\r\n\t\t'semicolon-or-setlocal': {\r\n\t\t\tpattern: /(\\s)(?:;|:>)(?=\\s|$)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'function'\r\n\t\t},\r\n\r\n\t\t// do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\r\n\t\t'curly-brace-literal-delimiter': [\r\n\t\t\t{\r\n\t\t\t\t// opening\r\n\t\t\t\tpattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'operator'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// closing\r\n\t\t\t\tpattern: /(\\s)\\}(?=\\s|$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'operator'\r\n\t\t\t},\r\n\r\n\t\t],\r\n\r\n\t\t// do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\r\n\t\t'quotation-delimiter': [\r\n\t\t\t{\r\n\t\t\t\t// opening\r\n\t\t\t\tpattern: /(^|\\s)\\[(?=\\s)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'operator'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// closing\r\n\t\t\t\tpattern: /(\\s)\\](?=\\s|$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'operator'\r\n\t\t\t},\r\n\t\t],\r\n\r\n\t\t'normal-word': {\r\n\t\t\tpattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t\tbasic first-class string \"a\"\r\n\t\t\t\twith escaped double-quote \"a\\\"\"\r\n\t\t\t\tescaped backslash \"\\\\\"\r\n\t\t\t\tand general escapes since Factor has so many \"\\N\"\r\n\r\n\t\t\tsyntax that works in the reference implementation that isn't fully\r\n\t\t\tsupported because it's an implementation detail:\r\n\t\t\t\t\"string 1\"\"string 2\" -> 2 strings (works anyway)\r\n\t\t\t\t\"string\"5 -> string, 5\r\n\t\t\t\t\"string\"[ ] -> string, quotation\r\n\t\t\t\t{ \"a\"} -> array<string>\r\n\r\n\t\t\tthe rest of those examples all properly recognise the string, but not\r\n\t\t\t\tthe other object (number, quotation, etc)\r\n\t\t\tthis is fine for a regex-only implementation.\r\n\t\t*/\r\n\t\t'string': {\r\n\t\t\tpattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: string_inside\r\n\t\t}\r\n\t};\r\n\r\n\tvar escape = function (str) {\r\n\t\treturn (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1');\r\n\t};\r\n\r\n\tvar arrToWordsRegExp = function (arr) {\r\n\t\treturn new RegExp(\r\n\t\t\t'(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)'\r\n\t\t);\r\n\t};\r\n\r\n\tvar builtins = {\r\n\t\t'kernel-builtin': [\r\n\t\t\t'or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'\r\n\t\t],\r\n\t\t'other-builtin-syntax': [\r\n\t\t\t// syntax\r\n\t\t\t'=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\\\', 'B', 'PRIVATE>', '\\\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable',\r\n\t\t\t// literals\r\n\t\t\t'$', '$[', '${'\r\n\t\t],\r\n\t\t'sequences-builtin': [\r\n\t\t\t'member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'\r\n\t\t],\r\n\t\t'math-builtin': [\r\n\t\t\t'number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator'\r\n\t\t]\r\n\t\t// that's all for now\r\n\t};\r\n\r\n\tObject.keys(builtins).forEach(function (k) {\r\n\t\tfactor[k].pattern = arrToWordsRegExp(builtins[k]);\r\n\t});\r\n\r\n\tvar combinators = [\r\n\t\t// kernel\r\n\t\t'2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@',\r\n\t\t// sequences\r\n\t\t'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index',\r\n\t\t// math\r\n\t\t'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?',\r\n\t\t// math.combinators\r\n\t\t'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative',\r\n\t\t// combinators\r\n\t\t'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot',\r\n\t\t// combinators.short-circuit\r\n\t\t'2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&',\r\n\t\t// combinators.smart\r\n\t\t'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence',\r\n\t\t// tafn\r\n\t];\r\n\r\n\tfactor.combinators.pattern = arrToWordsRegExp(combinators);\r\n\r\n\tPrism.languages.factor = factor;\r\n\r\n}(Prism));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}