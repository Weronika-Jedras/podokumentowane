{"ast":null,"code":"Prism.languages.racket = Prism.languages.extend('scheme', {\n  'lambda-parameter': {\n    // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n    // this will just prevent false positives of the `function` pattern\n    pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('racket', 'string', {\n  'lang': {\n    pattern: /^#lang.+/m,\n    greedy: true,\n    alias: 'keyword'\n  }\n});\nPrism.languages.rkt = Prism.languages.racket;","map":{"version":3,"names":["Prism","languages","racket","extend","pattern","lookbehind","insertBefore","greedy","alias","rkt"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-racket.js"],"sourcesContent":["Prism.languages.racket = Prism.languages.extend('scheme', {\r\n\t'lambda-parameter': {\r\n\t\t// the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\r\n\t\t// this will just prevent false positives of the `function` pattern\r\n\t\tpattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\r\n\t\tlookbehind: true\r\n\t}\r\n});\r\n\r\nPrism.languages.insertBefore('racket', 'string', {\r\n\t'lang': {\r\n\t\tpattern: /^#lang.+/m,\r\n\t\tgreedy: true,\r\n\t\talias: 'keyword'\r\n\t}\r\n});\r\n\r\nPrism.languages.rkt = Prism.languages.racket;\r\n"],"mappings":"AAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,GAAGF,KAAK,CAACC,SAAS,CAACE,MAAM,CAAC,QAAQ,EAAE;EACzD,kBAAkB,EAAE;IACnB;IACA;IACAC,OAAO,EAAE,oCAAoC;IAC7CC,UAAU,EAAE;EACb;AACD,CAAC,CAAC;AAEFL,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,QAAQ,EAAE,QAAQ,EAAE;EAChD,MAAM,EAAE;IACPF,OAAO,EAAE,WAAW;IACpBG,MAAM,EAAE,IAAI;IACZC,KAAK,EAAE;EACR;AACD,CAAC,CAAC;AAEFR,KAAK,CAACC,SAAS,CAACQ,GAAG,GAAGT,KAAK,CAACC,SAAS,CAACC,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}