{"ast":null,"code":"import { produce } from 'immer';\n//import { defaultImport } from \"default-import\";\nimport { ActionType } from \"../action-types\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst reducer = produce(function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ActionType.FETCH_CELLS:\n      state.loading = true;\n      state.error = null;\n      return state;\n    case ActionType.FETCH_CELLS_COMPLETE:\n      state.order = action.payload.map(cell => cell.id);\n      state.data = action.payload.reduce((acc, cell) => {\n        acc[cell.id] = cell;\n        return acc;\n      }, {});\n      return state;\n    case ActionType.FETCH_CELLS_ERROR:\n      state.loading = false;\n      state.error = action.payload;\n      return state;\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetIndex = direction === 'up' ? index - 1 : index + 1;\n      if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n        return state;\n      }\n      state.order[index] = state.order[targetIndex];\n      state.order[targetIndex] = action.payload.id;\n      return state;\n    case ActionType.INSERT_CELL_AFTER:\n      const cell = {\n        content: '',\n        type: action.payload.type,\n        id: randomId()\n      };\n      state.data[cell.id] = cell;\n      const foundIndex = state.order.findIndex(id => id === action.payload.id);\n      if (foundIndex < 0) {\n        state.order.unshift(cell.id);\n      } else {\n        state.order.splice(foundIndex + 1, 0, cell.id);\n      }\n      return state;\n    default:\n      return state;\n  }\n}, initialState);\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 5);\n};\nexport default reducer;","map":{"version":3,"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","arguments","length","undefined","action","type","FETCH_CELLS","FETCH_CELLS_COMPLETE","payload","map","cell","id","reduce","acc","FETCH_CELLS_ERROR","UPDATE_CELL","content","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","INSERT_CELL_AFTER","randomId","foundIndex","unshift","splice","Math","random","toString","substring"],"sources":["C:/Users/weraj/OneDrive/Pulpit/ACS/SEM VI/Advanced web techno/pokodowane/packages/local-client/src/state/reducers/cellsReducer.ts"],"sourcesContent":["import { produce } from 'immer';\r\n//import { defaultImport } from \"default-import\";\r\nimport { ActionType } from \"../action-types\";\r\nimport { Action } from \"../actions\";\r\nimport { Cell } from \"../cell\";\r\n\r\ninterface CellsState {\r\n  loading: boolean;\r\n  error: string | null;\r\n  order: string[];\r\n  data: {\r\n    [key: string]: Cell\r\n  }\r\n}\r\n\r\nconst initialState: CellsState = {\r\n  loading: false,\r\n  error: null,\r\n  order: [],\r\n  data: {}\r\n};\r\n\r\nconst reducer = produce((state: CellsState = initialState, action: Action) => {\r\n  switch (action.type) {\r\n    case ActionType.FETCH_CELLS:\r\n      state.loading = true;\r\n      state.error = null;\r\n\r\n      return state;\r\n    case ActionType.FETCH_CELLS_COMPLETE:\r\n      state.order = action.payload.map(cell=>cell.id);\r\n      state.data = action.payload.reduce((acc, cell) => {\r\n        acc[cell.id] = cell;\r\n        return acc;\r\n      }, {} as CellsState['data']);\r\n\r\n      return state;\r\n    case ActionType.FETCH_CELLS_ERROR:\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n\r\n      return state;\r\n    case ActionType.UPDATE_CELL:\r\n      const { id, content } = action.payload;\r\n      \r\n      state.data[id].content = content;\r\n      return state;\r\n    case ActionType.DELETE_CELL:\r\n      delete state.data[action.payload];\r\n      state.order = state.order.filter((id) => id !== action.payload);\r\n      return state;\r\n    case ActionType.MOVE_CELL:\r\n      const { direction } = action.payload;\r\n      const index = state.order.findIndex((id) => id === action.payload.id);\r\n      const targetIndex = direction === 'up' ? index -1 : index +1;\r\n\r\n      if (targetIndex < 0 || targetIndex > state.order.length - 1){\r\n        return state;\r\n      }\r\n\r\n      state.order[index] = state.order[targetIndex];\r\n      state.order[targetIndex] = action.payload.id;\r\n\r\n      return state;\r\n    case ActionType.INSERT_CELL_AFTER:\r\n      const cell: Cell = {\r\n        content: '',\r\n        type: action.payload.type,\r\n        id: randomId()\r\n      };\r\n\r\n      state.data[cell.id] = cell;\r\n\r\n      const foundIndex = state.order.findIndex(id => id ===action.payload.id);\r\n\r\n      if (foundIndex < 0){\r\n        state.order.unshift(cell.id);\r\n      } else {\r\n        state.order.splice(foundIndex + 1, 0, cell.id);\r\n      }\r\n\r\n\r\n      return state;\r\n    default:\r\n        return state;\r\n  }\r\n}, initialState);\r\n\r\nconst randomId = () => {\r\n  return Math.random().toString(36).substring(2,5);\r\n};\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}