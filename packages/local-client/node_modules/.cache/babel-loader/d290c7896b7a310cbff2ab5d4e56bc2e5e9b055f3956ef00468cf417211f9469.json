{"ast":null,"code":"(function (Prism) {\n  // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n  // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n\n  var spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source;\n  // At least one space, comment, or line break\n  var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function () {\n    return spaceAfterBackSlash;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\n  var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () {\n    return string;\n  });\n  var stringRule = {\n    pattern: RegExp(string),\n    greedy: true\n  };\n  var commentRule = {\n    pattern: /(^[ \\t]*)#.*/m,\n    lookbehind: true,\n    greedy: true\n  };\n\n  /**\r\n   * @param {string} source\r\n   * @param {string} flags\r\n   * @returns {RegExp}\r\n   */\n  function re(source, flags) {\n    source = source.replace(/<OPT>/g, function () {\n      return option;\n    }).replace(/<SP>/g, function () {\n      return space;\n    });\n    return RegExp(source, flags);\n  }\n  Prism.languages.docker = {\n    'instruction': {\n      pattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'options': {\n          pattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\n          lookbehind: true,\n          greedy: true,\n          inside: {\n            'property': {\n              pattern: /(^|\\s)--[\\w-]+/,\n              lookbehind: true\n            },\n            'string': [stringRule, {\n              pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n              lookbehind: true\n            }],\n            'operator': /\\\\$/m,\n            'punctuation': /=/\n          }\n        },\n        'keyword': [{\n          // https://docs.docker.com/engine/reference/builder/#healthcheck\n          pattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\n          lookbehind: true,\n          greedy: true\n        }, {\n          // https://docs.docker.com/engine/reference/builder/#from\n          pattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\n          lookbehind: true,\n          greedy: true\n        }, {\n          // https://docs.docker.com/engine/reference/builder/#onbuild\n          pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n          lookbehind: true,\n          greedy: true\n        }, {\n          pattern: /^\\w+/,\n          greedy: true\n        }],\n        'comment': commentRule,\n        'string': stringRule,\n        'variable': /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n        'operator': /\\\\$/m\n      }\n    },\n    'comment': commentRule\n  };\n  Prism.languages.dockerfile = Prism.languages.docker;\n})(Prism);","map":{"version":3,"names":["Prism","spaceAfterBackSlash","source","space","replace","string","option","stringRule","pattern","RegExp","greedy","commentRule","lookbehind","re","flags","languages","docker","inside","dockerfile"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-docker.js"],"sourcesContent":["(function (Prism) {\r\n\r\n\t// Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\r\n\t// that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\r\n\r\n\tvar spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source;\r\n\t// At least one space, comment, or line break\r\n\tvar space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source\r\n\t\t.replace(/<SP_BS>/g, function () { return spaceAfterBackSlash; });\r\n\r\n\tvar string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\r\n\tvar option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () { return string; });\r\n\r\n\tvar stringRule = {\r\n\t\tpattern: RegExp(string),\r\n\t\tgreedy: true\r\n\t};\r\n\tvar commentRule = {\r\n\t\tpattern: /(^[ \\t]*)#.*/m,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true\r\n\t};\r\n\r\n\t/**\r\n\t * @param {string} source\r\n\t * @param {string} flags\r\n\t * @returns {RegExp}\r\n\t */\r\n\tfunction re(source, flags) {\r\n\t\tsource = source\r\n\t\t\t.replace(/<OPT>/g, function () { return option; })\r\n\t\t\t.replace(/<SP>/g, function () { return space; });\r\n\r\n\t\treturn RegExp(source, flags);\r\n\t}\r\n\r\n\tPrism.languages.docker = {\r\n\t\t'instruction': {\r\n\t\t\tpattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'options': {\r\n\t\t\t\t\tpattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tgreedy: true,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'property': {\r\n\t\t\t\t\t\t\tpattern: /(^|\\s)--[\\w-]+/,\r\n\t\t\t\t\t\t\tlookbehind: true\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'string': [\r\n\t\t\t\t\t\t\tstringRule,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\r\n\t\t\t\t\t\t\t\tlookbehind: true\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t'operator': /\\\\$/m,\r\n\t\t\t\t\t\t'punctuation': /=/\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'keyword': [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// https://docs.docker.com/engine/reference/builder/#healthcheck\r\n\t\t\t\t\t\tpattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\r\n\t\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\t\tgreedy: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// https://docs.docker.com/engine/reference/builder/#from\r\n\t\t\t\t\t\tpattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\r\n\t\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\t\tgreedy: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// https://docs.docker.com/engine/reference/builder/#onbuild\r\n\t\t\t\t\t\tpattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\r\n\t\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\t\tgreedy: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpattern: /^\\w+/,\r\n\t\t\t\t\t\tgreedy: true\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t'comment': commentRule,\r\n\t\t\t\t'string': stringRule,\r\n\t\t\t\t'variable': /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\r\n\t\t\t\t'operator': /\\\\$/m\r\n\t\t\t}\r\n\t\t},\r\n\t\t'comment': commentRule\r\n\t};\r\n\r\n\tPrism.languages.dockerfile = Prism.languages.docker;\r\n\r\n}(Prism));\r\n"],"mappings":"AAAC,WAAUA,KAAK,EAAE;EAEjB;EACA;;EAEA,IAAIC,mBAAmB,GAAG,qDAAqD,CAACC,MAAM;EACtF;EACA,IAAIC,KAAK,GAAG,yCAAyC,CAACD,MAAM,CAC1DE,OAAO,CAAC,UAAU,EAAE,YAAY;IAAE,OAAOH,mBAAmB;EAAE,CAAC,CAAC;EAElE,IAAII,MAAM,GAAG,yEAAyE,CAACH,MAAM;EAC7F,IAAII,MAAM,GAAG,6CAA6C,CAACJ,MAAM,CAACE,OAAO,CAAC,QAAQ,EAAE,YAAY;IAAE,OAAOC,MAAM;EAAE,CAAC,CAAC;EAEnH,IAAIE,UAAU,GAAG;IAChBC,OAAO,EAAEC,MAAM,CAACJ,MAAM,CAAC;IACvBK,MAAM,EAAE;EACT,CAAC;EACD,IAAIC,WAAW,GAAG;IACjBH,OAAO,EAAE,eAAe;IACxBI,UAAU,EAAE,IAAI;IAChBF,MAAM,EAAE;EACT,CAAC;;EAED;AACD;AACA;AACA;AACA;EACC,SAASG,EAAEA,CAACX,MAAM,EAAEY,KAAK,EAAE;IAC1BZ,MAAM,GAAGA,MAAM,CACbE,OAAO,CAAC,QAAQ,EAAE,YAAY;MAAE,OAAOE,MAAM;IAAE,CAAC,CAAC,CACjDF,OAAO,CAAC,OAAO,EAAE,YAAY;MAAE,OAAOD,KAAK;IAAE,CAAC,CAAC;IAEjD,OAAOM,MAAM,CAACP,MAAM,EAAEY,KAAK,CAAC;EAC7B;EAEAd,KAAK,CAACe,SAAS,CAACC,MAAM,GAAG;IACxB,aAAa,EAAE;MACdR,OAAO,EAAE,iNAAiN;MAC1NI,UAAU,EAAE,IAAI;MAChBF,MAAM,EAAE,IAAI;MACZO,MAAM,EAAE;QACP,SAAS,EAAE;UACVT,OAAO,EAAEK,EAAE,CAAC,+CAA+C,CAACX,MAAM,EAAE,GAAG,CAAC;UACxEU,UAAU,EAAE,IAAI;UAChBF,MAAM,EAAE,IAAI;UACZO,MAAM,EAAE;YACP,UAAU,EAAE;cACXT,OAAO,EAAE,gBAAgB;cACzBI,UAAU,EAAE;YACb,CAAC;YACD,QAAQ,EAAE,CACTL,UAAU,EACV;cACCC,OAAO,EAAE,6BAA6B;cACtCI,UAAU,EAAE;YACb,CAAC,CACD;YACD,UAAU,EAAE,MAAM;YAClB,aAAa,EAAE;UAChB;QACD,CAAC;QACD,SAAS,EAAE,CACV;UACC;UACAJ,OAAO,EAAEK,EAAE,CAAC,gEAAgE,CAACX,MAAM,EAAE,GAAG,CAAC;UACzFU,UAAU,EAAE,IAAI;UAChBF,MAAM,EAAE;QACT,CAAC,EACD;UACC;UACAF,OAAO,EAAEK,EAAE,CAAC,gEAAgE,CAACX,MAAM,EAAE,GAAG,CAAC;UACzFU,UAAU,EAAE,IAAI;UAChBF,MAAM,EAAE;QACT,CAAC,EACD;UACC;UACAF,OAAO,EAAEK,EAAE,CAAC,mBAAmB,CAACX,MAAM,EAAE,GAAG,CAAC;UAC5CU,UAAU,EAAE,IAAI;UAChBF,MAAM,EAAE;QACT,CAAC,EACD;UACCF,OAAO,EAAE,MAAM;UACfE,MAAM,EAAE;QACT,CAAC,CACD;QACD,SAAS,EAAEC,WAAW;QACtB,QAAQ,EAAEJ,UAAU;QACpB,UAAU,EAAE,0BAA0B;QACtC,UAAU,EAAE;MACb;IACD,CAAC;IACD,SAAS,EAAEI;EACZ,CAAC;EAEDX,KAAK,CAACe,SAAS,CAACG,UAAU,GAAGlB,KAAK,CAACe,SAAS,CAACC,MAAM;AAEpD,CAAC,EAAChB,KAAK,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}