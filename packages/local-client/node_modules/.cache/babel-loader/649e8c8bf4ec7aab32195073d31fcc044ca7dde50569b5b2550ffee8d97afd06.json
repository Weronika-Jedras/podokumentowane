{"ast":null,"code":"(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  };\n  // 123 -123 .123 -.123 12.3 -12.3\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [\n    // We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^\\{|\\}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^[ \\t]*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);","map":{"version":3,"names":["Prism","unit","pattern","lookbehind","number","inside","greedy","alias","rest","languages","stylus","interpolation","comment","func","string"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-stylus.js"],"sourcesContent":["(function (Prism) {\r\n\tvar unit = {\r\n\t\tpattern: /(\\b\\d+)(?:%|[a-z]+)/,\r\n\t\tlookbehind: true\r\n\t};\r\n\t// 123 -123 .123 -.123 12.3 -12.3\r\n\tvar number = {\r\n\t\tpattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\r\n\t\tlookbehind: true\r\n\t};\r\n\r\n\tvar inside = {\r\n\t\t'comment': {\r\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'url': {\r\n\t\t\tpattern: /\\burl\\(([\"']?).*?\\1\\)/i,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'string': {\r\n\t\t\tpattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'interpolation': null, // See below\r\n\t\t'func': null, // See below\r\n\t\t'important': /\\B!(?:important|optional)\\b/i,\r\n\t\t'keyword': {\r\n\t\t\tpattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s|$)|@[\\w-]+)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'hexcode': /#[\\da-f]{3,6}/i,\r\n\t\t'color': [\r\n\t\t\t/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,\r\n\t\t\t{\r\n\t\t\t\tpattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'unit': unit,\r\n\t\t\t\t\t'number': number,\r\n\t\t\t\t\t'function': /[\\w-]+(?=\\()/,\r\n\t\t\t\t\t'punctuation': /[(),]/\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t'entity': /\\\\[\\da-f]{1,8}/i,\r\n\t\t'unit': unit,\r\n\t\t'boolean': /\\b(?:true|false)\\b/,\r\n\t\t'operator': [\r\n\t\t\t// We want non-word chars around \"-\" because it is\r\n\t\t\t// accepted in property names.\r\n\t\t\t/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\r\n\t\t],\r\n\t\t'number': number,\r\n\t\t'punctuation': /[{}()\\[\\];:,]/\r\n\t};\r\n\r\n\tinside['interpolation'] = {\r\n\t\tpattern: /\\{[^\\r\\n}:]+\\}/,\r\n\t\talias: 'variable',\r\n\t\tinside: {\r\n\t\t\t'delimiter': {\r\n\t\t\t\tpattern: /^\\{|\\}$/,\r\n\t\t\t\talias: 'punctuation'\r\n\t\t\t},\r\n\t\t\trest: inside\r\n\t\t}\r\n\t};\r\n\tinside['func'] = {\r\n\t\tpattern: /[\\w-]+\\([^)]*\\).*/,\r\n\t\tinside: {\r\n\t\t\t'function': /^[^(]+/,\r\n\t\t\trest: inside\r\n\t\t}\r\n\t};\r\n\r\n\tPrism.languages.stylus = {\r\n\t\t'atrule-declaration': {\r\n\t\t\tpattern: /(^[ \\t]*)@.+/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'atrule': /^@[\\w-]+/,\r\n\t\t\t\trest: inside\r\n\t\t\t}\r\n\t\t},\r\n\t\t'variable-declaration': {\r\n\t\t\tpattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'variable': /^\\S+/,\r\n\t\t\t\trest: inside\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t'statement': {\r\n\t\t\tpattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t].+/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'keyword': /^\\S+/,\r\n\t\t\t\trest: inside\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// A property/value pair cannot end with a comma or a brace\r\n\t\t// It cannot have indented content unless it ended with a semicolon\r\n\t\t'property-declaration': {\r\n\t\t\tpattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'property': {\r\n\t\t\t\t\tpattern: /^[^\\s:]+/,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'interpolation': inside.interpolation\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\trest: inside\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t// A selector can contain parentheses only as part of a pseudo-element\r\n\t\t// It can span multiple lines.\r\n\t\t// It must end with a comma or an accolade or have indented content.\r\n\t\t'selector': {\r\n\t\t\tpattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'interpolation': inside.interpolation,\r\n\t\t\t\t'comment': inside.comment,\r\n\t\t\t\t'punctuation': /[{},]/\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t'func': inside.func,\r\n\t\t'string': inside.string,\r\n\t\t'comment': {\r\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'interpolation': inside.interpolation,\r\n\t\t'punctuation': /[{}()\\[\\];:.]/\r\n\t};\r\n}(Prism));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}