{"ast":null,"code":"module.exports = phrasing;\nfunction phrasing(parent, context, safeOptions) {\n  var children = parent.children || [];\n  var results = [];\n  var index = -1;\n  var before = safeOptions.before;\n  var after;\n  var handle;\n  var child;\n  while (++index < children.length) {\n    child = children[index];\n    if (index + 1 < children.length) {\n      handle = context.handle.handlers[children[index + 1].type];\n      if (handle && handle.peek) handle = handle.peek;\n      after = handle ? handle(children[index + 1], parent, context, {\n        before: '',\n        after: ''\n      }).charAt(0) : '';\n    } else {\n      after = safeOptions.after;\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (results.length > 0 && (before === '\\r' || before === '\\n') && child.type === 'html') {\n      results[results.length - 1] = results[results.length - 1].replace(/(\\r?\\n|\\r)$/, ' ');\n      before = ' ';\n    }\n    results.push(context.handle(child, parent, context, {\n      before: before,\n      after: after\n    }));\n    before = results[results.length - 1].slice(-1);\n  }\n  return results.join('');\n}","map":{"version":3,"names":["module","exports","phrasing","parent","context","safeOptions","children","results","index","before","after","handle","child","length","handlers","type","peek","charAt","replace","push","slice","join"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js"],"sourcesContent":["module.exports = phrasing\r\n\r\nfunction phrasing(parent, context, safeOptions) {\r\n  var children = parent.children || []\r\n  var results = []\r\n  var index = -1\r\n  var before = safeOptions.before\r\n  var after\r\n  var handle\r\n  var child\r\n\r\n  while (++index < children.length) {\r\n    child = children[index]\r\n\r\n    if (index + 1 < children.length) {\r\n      handle = context.handle.handlers[children[index + 1].type]\r\n      if (handle && handle.peek) handle = handle.peek\r\n      after = handle\r\n        ? handle(children[index + 1], parent, context, {\r\n            before: '',\r\n            after: ''\r\n          }).charAt(0)\r\n        : ''\r\n    } else {\r\n      after = safeOptions.after\r\n    }\r\n\r\n    // In some cases, html (text) can be found in phrasing right after an eol.\r\n    // When we’d serialize that, in most cases that would be seen as html\r\n    // (flow).\r\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\r\n    // reasonable approach: replace that eol with a space.\r\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\r\n    if (\r\n      results.length > 0 &&\r\n      (before === '\\r' || before === '\\n') &&\r\n      child.type === 'html'\r\n    ) {\r\n      results[results.length - 1] = results[results.length - 1].replace(\r\n        /(\\r?\\n|\\r)$/,\r\n        ' '\r\n      )\r\n      before = ' '\r\n    }\r\n\r\n    results.push(\r\n      context.handle(child, parent, context, {\r\n        before: before,\r\n        after: after\r\n      })\r\n    )\r\n\r\n    before = results[results.length - 1].slice(-1)\r\n  }\r\n\r\n  return results.join('')\r\n}\r\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,QAAQ;AAEzB,SAASA,QAAQA,CAACC,MAAM,EAAEC,OAAO,EAAEC,WAAW,EAAE;EAC9C,IAAIC,QAAQ,GAAGH,MAAM,CAACG,QAAQ,IAAI,EAAE;EACpC,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,MAAM,GAAGJ,WAAW,CAACI,MAAM;EAC/B,IAAIC,KAAK;EACT,IAAIC,MAAM;EACV,IAAIC,KAAK;EAET,OAAO,EAAEJ,KAAK,GAAGF,QAAQ,CAACO,MAAM,EAAE;IAChCD,KAAK,GAAGN,QAAQ,CAACE,KAAK,CAAC;IAEvB,IAAIA,KAAK,GAAG,CAAC,GAAGF,QAAQ,CAACO,MAAM,EAAE;MAC/BF,MAAM,GAAGP,OAAO,CAACO,MAAM,CAACG,QAAQ,CAACR,QAAQ,CAACE,KAAK,GAAG,CAAC,CAAC,CAACO,IAAI,CAAC;MAC1D,IAAIJ,MAAM,IAAIA,MAAM,CAACK,IAAI,EAAEL,MAAM,GAAGA,MAAM,CAACK,IAAI;MAC/CN,KAAK,GAAGC,MAAM,GACVA,MAAM,CAACL,QAAQ,CAACE,KAAK,GAAG,CAAC,CAAC,EAAEL,MAAM,EAAEC,OAAO,EAAE;QAC3CK,MAAM,EAAE,EAAE;QACVC,KAAK,EAAE;MACT,CAAC,CAAC,CAACO,MAAM,CAAC,CAAC,CAAC,GACZ,EAAE;IACR,CAAC,MAAM;MACLP,KAAK,GAAGL,WAAW,CAACK,KAAK;IAC3B;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA,IACEH,OAAO,CAACM,MAAM,GAAG,CAAC,KACjBJ,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,IAAI,CAAC,IACpCG,KAAK,CAACG,IAAI,KAAK,MAAM,EACrB;MACAR,OAAO,CAACA,OAAO,CAACM,MAAM,GAAG,CAAC,CAAC,GAAGN,OAAO,CAACA,OAAO,CAACM,MAAM,GAAG,CAAC,CAAC,CAACK,OAAO,CAC/D,aAAa,EACb,GAAG,CACJ;MACDT,MAAM,GAAG,GAAG;IACd;IAEAF,OAAO,CAACY,IAAI,CACVf,OAAO,CAACO,MAAM,CAACC,KAAK,EAAET,MAAM,EAAEC,OAAO,EAAE;MACrCK,MAAM,EAAEA,MAAM;MACdC,KAAK,EAAEA;IACT,CAAC,CAAC,CACH;IAEDD,MAAM,GAAGF,OAAO,CAACA,OAAO,CAACM,MAAM,GAAG,CAAC,CAAC,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;EAChD;EAEA,OAAOb,OAAO,CAACc,IAAI,CAAC,EAAE,CAAC;AACzB"},"metadata":{},"sourceType":"script","externalDependencies":[]}