{"ast":null,"code":"(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important;\n\n  // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);","map":{"version":3,"names":["Prism","languages","sass","extend","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","important","property"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-sass.js"],"sourcesContent":["(function (Prism) {\r\n\tPrism.languages.sass = Prism.languages.extend('css', {\r\n\t\t// Sass comments don't need to be closed, only indented\r\n\t\t'comment': {\r\n\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\r\n\t\t\tlookbehind: true\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.languages.insertBefore('sass', 'atrule', {\r\n\t\t// We want to consume the whole line\r\n\t\t'atrule-line': {\r\n\t\t\t// Includes support for = and + shortcuts\r\n\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,\r\n\t\t\tinside: {\r\n\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tdelete Prism.languages.sass.atrule;\r\n\r\n\r\n\tvar variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\r\n\tvar operator = [\r\n\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\r\n\t\t{\r\n\t\t\tpattern: /(\\s)-(?=\\s)/,\r\n\t\t\tlookbehind: true\r\n\t\t}\r\n\t];\r\n\r\n\tPrism.languages.insertBefore('sass', 'property', {\r\n\t\t// We want to consume the whole line\r\n\t\t'variable-line': {\r\n\t\t\tpattern: /^[ \\t]*\\$.+/m,\r\n\t\t\tinside: {\r\n\t\t\t\t'punctuation': /:/,\r\n\t\t\t\t'variable': variable,\r\n\t\t\t\t'operator': operator\r\n\t\t\t}\r\n\t\t},\r\n\t\t// We want to consume the whole line\r\n\t\t'property-line': {\r\n\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\r\n\t\t\tinside: {\r\n\t\t\t\t'property': [\r\n\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,\r\n\t\t\t\t\t\tlookbehind: true\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t'punctuation': /:/,\r\n\t\t\t\t'variable': variable,\r\n\t\t\t\t'operator': operator,\r\n\t\t\t\t'important': Prism.languages.sass.important\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tdelete Prism.languages.sass.property;\r\n\tdelete Prism.languages.sass.important;\r\n\r\n\t// Now that whole lines for other patterns are consumed,\r\n\t// what's left should be selectors\r\n\tPrism.languages.insertBefore('sass', 'punctuation', {\r\n\t\t'selector': {\r\n\t\t\tpattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\r\n\t\t\tlookbehind: true\r\n\t\t}\r\n\t});\r\n\r\n}(Prism));\r\n"],"mappings":"AAAC,WAAUA,KAAK,EAAE;EACjBA,KAAK,CAACC,SAAS,CAACC,IAAI,GAAGF,KAAK,CAACC,SAAS,CAACE,MAAM,CAAC,KAAK,EAAE;IACpD;IACA,SAAS,EAAE;MACVC,OAAO,EAAE,+CAA+C;MACxDC,UAAU,EAAE;IACb;EACD,CAAC,CAAC;EAEFL,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,MAAM,EAAE,QAAQ,EAAE;IAC9C;IACA,aAAa,EAAE;MACd;MACAF,OAAO,EAAE,qBAAqB;MAC9BG,MAAM,EAAE;QACP,QAAQ,EAAE;MACX;IACD;EACD,CAAC,CAAC;EACF,OAAOP,KAAK,CAACC,SAAS,CAACC,IAAI,CAACM,MAAM;EAGlC,IAAIC,QAAQ,GAAG,wBAAwB;EACvC,IAAIC,QAAQ,GAAG,CACd,0CAA0C,EAC1C;IACCN,OAAO,EAAE,aAAa;IACtBC,UAAU,EAAE;EACb,CAAC,CACD;EAEDL,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE;IAChD;IACA,eAAe,EAAE;MAChBF,OAAO,EAAE,cAAc;MACvBG,MAAM,EAAE;QACP,aAAa,EAAE,GAAG;QAClB,UAAU,EAAEE,QAAQ;QACpB,UAAU,EAAEC;MACb;IACD,CAAC;IACD;IACA,eAAe,EAAE;MAChBN,OAAO,EAAE,oCAAoC;MAC7CG,MAAM,EAAE;QACP,UAAU,EAAE,CACX,iBAAiB,EACjB;UACCH,OAAO,EAAE,YAAY;UACrBC,UAAU,EAAE;QACb,CAAC,CACD;QACD,aAAa,EAAE,GAAG;QAClB,UAAU,EAAEI,QAAQ;QACpB,UAAU,EAAEC,QAAQ;QACpB,WAAW,EAAEV,KAAK,CAACC,SAAS,CAACC,IAAI,CAACS;MACnC;IACD;EACD,CAAC,CAAC;EACF,OAAOX,KAAK,CAACC,SAAS,CAACC,IAAI,CAACU,QAAQ;EACpC,OAAOZ,KAAK,CAACC,SAAS,CAACC,IAAI,CAACS,SAAS;;EAErC;EACA;EACAX,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,MAAM,EAAE,aAAa,EAAE;IACnD,UAAU,EAAE;MACXF,OAAO,EAAE,sHAAsH;MAC/HC,UAAU,EAAE;IACb;EACD,CAAC,CAAC;AAEH,CAAC,EAACL,KAAK,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}