{"ast":null,"code":"Prism.languages.elm = {\n  'comment': /--.*|\\{-[\\s\\S]*?-\\}/,\n  'char': {\n    pattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,\n    greedy: true\n  },\n  'string': [{\n    // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n    pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n    greedy: true\n  }, {\n    pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n    greedy: true\n  }],\n  'import-statement': {\n    // The imported or hidden names are not included in this import\n    // statement. This is because we want to highlight those exactly like\n    // we do for the names in the program.\n    pattern: /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n    lookbehind: true,\n    inside: {\n      'keyword': /\\b(?:import|as|exposing)\\b/\n    }\n  },\n  'keyword': /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n  // These are builtin variables only. Constructors are highlighted later as a constant.\n  'builtin': /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n  // decimal integers and floating point numbers | hexadecimal integers\n  'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n  // Most of this is needed because of the meaning of a single '.'.\n  // If it stands alone freely, it is the function composition.\n  // It may also be a separator between a module name and an identifier => no\n  // operator. If it comes together with other special characters it is an\n  // operator too.\n  // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n  // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n  'operator': /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n  // In Elm, nearly everything is a variable, do not highlight these.\n  'hvariable': /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n  'constant': /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n  'punctuation': /[{}[\\]|(),.:]/\n};","map":{"version":3,"names":["Prism","languages","elm","pattern","greedy","lookbehind","inside"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-elm.js"],"sourcesContent":["Prism.languages.elm = {\r\n\t'comment': /--.*|\\{-[\\s\\S]*?-\\}/,\r\n\t'char': {\r\n\t\tpattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'string': [\r\n\t\t{\r\n\t\t\t// Multiline strings are wrapped in triple \". Quotes may appear unescaped.\r\n\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\r\n\t\t\tgreedy: true\r\n\t\t}\r\n\t],\r\n\t'import-statement': {\r\n\t\t// The imported or hidden names are not included in this import\r\n\t\t// statement. This is because we want to highlight those exactly like\r\n\t\t// we do for the names in the program.\r\n\t\tpattern: /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\r\n\t\tlookbehind: true,\r\n\t\tinside: {\r\n\t\t\t'keyword': /\\b(?:import|as|exposing)\\b/\r\n\t\t}\r\n\t},\r\n\t'keyword': /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\r\n\t// These are builtin variables only. Constructors are highlighted later as a constant.\r\n\t'builtin': /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\r\n\t// decimal integers and floating point numbers | hexadecimal integers\r\n\t'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\r\n\t// Most of this is needed because of the meaning of a single '.'.\r\n\t// If it stands alone freely, it is the function composition.\r\n\t// It may also be a separator between a module name and an identifier => no\r\n\t// operator. If it comes together with other special characters it is an\r\n\t// operator too.\r\n\t// Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\r\n\t// Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\r\n\t'operator': /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\r\n\t// In Elm, nearly everything is a variable, do not highlight these.\r\n\t'hvariable': /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\r\n\t'constant': /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\r\n\t'punctuation': /[{}[\\]|(),.:]/\r\n};\r\n"],"mappings":"AAAAA,KAAK,CAACC,SAAS,CAACC,GAAG,GAAG;EACrB,SAAS,EAAE,qBAAqB;EAChC,MAAM,EAAE;IACPC,OAAO,EAAE,uDAAuD;IAChEC,MAAM,EAAE;EACT,CAAC;EACD,QAAQ,EAAE,CACT;IACC;IACAD,OAAO,EAAE,gBAAgB;IACzBC,MAAM,EAAE;EACT,CAAC,EACD;IACCD,OAAO,EAAE,uBAAuB;IAChCC,MAAM,EAAE;EACT,CAAC,CACD;EACD,kBAAkB,EAAE;IACnB;IACA;IACA;IACAD,OAAO,EAAE,uGAAuG;IAChHE,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE;MACP,SAAS,EAAE;IACZ;EACD,CAAC;EACD,SAAS,EAAE,iFAAiF;EAC5F;EACA,SAAS,EAAE,yPAAyP;EACpQ;EACA,QAAQ,EAAE,kDAAkD;EAC5D;EACA;EACA;EACA;EACA;EACA;EACA;EACA,UAAU,EAAE,yDAAyD;EACrE;EACA,WAAW,EAAE,6BAA6B;EAC1C,UAAU,EAAE,6BAA6B;EACzC,aAAa,EAAE;AAChB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}