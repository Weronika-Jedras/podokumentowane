{"ast":null,"code":"Prism.languages.reason = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n});\n\n// We can't match functions property, so let's not even try.\ndelete Prism.languages.reason.function;","map":{"version":3,"names":["Prism","languages","reason","extend","pattern","greedy","insertBefore","alias","function"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-reason.js"],"sourcesContent":["Prism.languages.reason = Prism.languages.extend('clike', {\r\n\t'string': {\r\n\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\r\n\t\tgreedy: true\r\n\t},\r\n\t// 'class-name' must be matched *after* 'constructor' defined below\r\n\t'class-name': /\\b[A-Z]\\w*/,\r\n\t'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\r\n\t'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\r\n});\r\nPrism.languages.insertBefore('reason', 'class-name', {\r\n\t'character': {\r\n\t\tpattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\r\n\t\talias: 'string'\r\n\t},\r\n\t'constructor': {\r\n\t\t// Negative look-ahead prevents from matching things like String.capitalize\r\n\t\tpattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\r\n\t\talias: 'variable'\r\n\t},\r\n\t'label': {\r\n\t\tpattern: /\\b[a-z]\\w*(?=::)/,\r\n\t\talias: 'symbol'\r\n\t}\r\n});\r\n\r\n// We can't match functions property, so let's not even try.\r\ndelete Prism.languages.reason.function;\r\n"],"mappings":"AAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,GAAGF,KAAK,CAACC,SAAS,CAACE,MAAM,CAAC,OAAO,EAAE;EACxD,QAAQ,EAAE;IACTC,OAAO,EAAE,qCAAqC;IAC9CC,MAAM,EAAE;EACT,CAAC;EACD;EACA,YAAY,EAAE,YAAY;EAC1B,SAAS,EAAE,2RAA2R;EACtS,UAAU,EAAE;AACb,CAAC,CAAC;AACFL,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,QAAQ,EAAE,YAAY,EAAE;EACpD,WAAW,EAAE;IACZF,OAAO,EAAE,+DAA+D;IACxEG,KAAK,EAAE;EACR,CAAC;EACD,aAAa,EAAE;IACd;IACAH,OAAO,EAAE,uBAAuB;IAChCG,KAAK,EAAE;EACR,CAAC;EACD,OAAO,EAAE;IACRH,OAAO,EAAE,kBAAkB;IAC3BG,KAAK,EAAE;EACR;AACD,CAAC,CAAC;;AAEF;AACA,OAAOP,KAAK,CAACC,SAAS,CAACC,MAAM,CAACM,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}