{"ast":null,"code":"var phrasing = require('mdast-util-to-markdown/lib/util/container-phrasing');\nvar defaultInlineCode = require('mdast-util-to-markdown/lib/handle/inline-code');\nvar markdownTable = require('markdown-table');\nmodule.exports = toMarkdown;\nfunction toMarkdown(options) {\n  var settings = options || {};\n  var padding = settings.tableCellPadding;\n  var alignDelimiters = settings.tablePipeAlign;\n  var stringLength = settings.stringLength;\n  var around = padding ? ' ' : '|';\n  return {\n    unsafe: [{\n      character: '\\r',\n      inConstruct: 'tableCell'\n    }, {\n      character: '\\n',\n      inConstruct: 'tableCell'\n    },\n    // A pipe, when followed by a tab or space (padding), or a dash or colon\n    // (unpadded delimiter row), could result in a table.\n    {\n      atBreak: true,\n      character: '|',\n      after: '[\\t :-]'\n    },\n    // A pipe in a cell must be encoded.\n    {\n      character: '|',\n      inConstruct: 'tableCell'\n    },\n    // A colon must be followed by a dash, in which case it could start a\n    // delimiter row.\n    {\n      atBreak: true,\n      character: ':',\n      after: '-'\n    },\n    // A delimiter row can also start with a dash, when followed by more\n    // dashes, a colon, or a pipe.\n    // This is a stricter version than the built in check for lists, thematic\n    // breaks, and setex heading underlines though:\n    // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n    {\n      atBreak: true,\n      character: '-',\n      after: '[:|-]'\n    }],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  };\n  function handleTable(node, _, context) {\n    return serializeData(handleTableAsData(node, context), node.align);\n  }\n\n  // This function isn’t really used normally, because we handle rows at the\n  // table level.\n  // But, if someone passes in a table row, this ensures we make somewhat sense.\n  function handleTableRow(node, _, context) {\n    var row = handleTableRowAsData(node, context);\n    // `markdown-table` will always add an align row\n    var value = serializeData([row]);\n    return value.slice(0, value.indexOf('\\n'));\n  }\n  function handleTableCell(node, _, context) {\n    var exit = context.enter('tableCell');\n    var value = phrasing(node, context, {\n      before: around,\n      after: around\n    });\n    exit();\n    return value;\n  }\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align: align,\n      alignDelimiters: alignDelimiters,\n      padding: padding,\n      stringLength: stringLength\n    });\n  }\n  function handleTableAsData(node, context) {\n    var children = node.children;\n    var index = -1;\n    var length = children.length;\n    var result = [];\n    var subexit = context.enter('table');\n    while (++index < length) {\n      result[index] = handleTableRowAsData(children[index], context);\n    }\n    subexit();\n    return result;\n  }\n  function handleTableRowAsData(node, context) {\n    var children = node.children;\n    var index = -1;\n    var length = children.length;\n    var result = [];\n    var subexit = context.enter('tableRow');\n    while (++index < length) {\n      result[index] = handleTableCell(children[index], node, context);\n    }\n    subexit();\n    return result;\n  }\n  function inlineCodeWithTable(node, parent, context) {\n    var value = defaultInlineCode(node, parent, context);\n    if (context.stack.indexOf('tableCell') !== -1) {\n      value = value.replace(/\\|/g, '\\\\$&');\n    }\n    return value;\n  }\n}","map":{"version":3,"names":["phrasing","require","defaultInlineCode","markdownTable","module","exports","toMarkdown","options","settings","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","unsafe","character","inConstruct","atBreak","after","handlers","table","handleTable","tableRow","handleTableRow","tableCell","handleTableCell","inlineCode","inlineCodeWithTable","node","_","context","serializeData","handleTableAsData","align","row","handleTableRowAsData","value","slice","indexOf","exit","enter","before","matrix","children","index","length","result","subexit","parent","stack","replace"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/mdast-util-gfm-table/to-markdown.js"],"sourcesContent":["var phrasing = require('mdast-util-to-markdown/lib/util/container-phrasing')\r\nvar defaultInlineCode = require('mdast-util-to-markdown/lib/handle/inline-code')\r\nvar markdownTable = require('markdown-table')\r\n\r\nmodule.exports = toMarkdown\r\n\r\nfunction toMarkdown(options) {\r\n  var settings = options || {}\r\n  var padding = settings.tableCellPadding\r\n  var alignDelimiters = settings.tablePipeAlign\r\n  var stringLength = settings.stringLength\r\n  var around = padding ? ' ' : '|'\r\n\r\n  return {\r\n    unsafe: [\r\n      {character: '\\r', inConstruct: 'tableCell'},\r\n      {character: '\\n', inConstruct: 'tableCell'},\r\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\r\n      // (unpadded delimiter row), could result in a table.\r\n      {atBreak: true, character: '|', after: '[\\t :-]'},\r\n      // A pipe in a cell must be encoded.\r\n      {character: '|', inConstruct: 'tableCell'},\r\n      // A colon must be followed by a dash, in which case it could start a\r\n      // delimiter row.\r\n      {atBreak: true, character: ':', after: '-'},\r\n      // A delimiter row can also start with a dash, when followed by more\r\n      // dashes, a colon, or a pipe.\r\n      // This is a stricter version than the built in check for lists, thematic\r\n      // breaks, and setex heading underlines though:\r\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\r\n      {atBreak: true, character: '-', after: '[:|-]'}\r\n    ],\r\n    handlers: {\r\n      table: handleTable,\r\n      tableRow: handleTableRow,\r\n      tableCell: handleTableCell,\r\n      inlineCode: inlineCodeWithTable\r\n    }\r\n  }\r\n\r\n  function handleTable(node, _, context) {\r\n    return serializeData(handleTableAsData(node, context), node.align)\r\n  }\r\n\r\n  // This function isn’t really used normally, because we handle rows at the\r\n  // table level.\r\n  // But, if someone passes in a table row, this ensures we make somewhat sense.\r\n  function handleTableRow(node, _, context) {\r\n    var row = handleTableRowAsData(node, context)\r\n    // `markdown-table` will always add an align row\r\n    var value = serializeData([row])\r\n    return value.slice(0, value.indexOf('\\n'))\r\n  }\r\n\r\n  function handleTableCell(node, _, context) {\r\n    var exit = context.enter('tableCell')\r\n    var value = phrasing(node, context, {before: around, after: around})\r\n    exit()\r\n    return value\r\n  }\r\n\r\n  function serializeData(matrix, align) {\r\n    return markdownTable(matrix, {\r\n      align: align,\r\n      alignDelimiters: alignDelimiters,\r\n      padding: padding,\r\n      stringLength: stringLength\r\n    })\r\n  }\r\n\r\n  function handleTableAsData(node, context) {\r\n    var children = node.children\r\n    var index = -1\r\n    var length = children.length\r\n    var result = []\r\n    var subexit = context.enter('table')\r\n\r\n    while (++index < length) {\r\n      result[index] = handleTableRowAsData(children[index], context)\r\n    }\r\n\r\n    subexit()\r\n\r\n    return result\r\n  }\r\n\r\n  function handleTableRowAsData(node, context) {\r\n    var children = node.children\r\n    var index = -1\r\n    var length = children.length\r\n    var result = []\r\n    var subexit = context.enter('tableRow')\r\n\r\n    while (++index < length) {\r\n      result[index] = handleTableCell(children[index], node, context)\r\n    }\r\n\r\n    subexit()\r\n\r\n    return result\r\n  }\r\n\r\n  function inlineCodeWithTable(node, parent, context) {\r\n    var value = defaultInlineCode(node, parent, context)\r\n\r\n    if (context.stack.indexOf('tableCell') !== -1) {\r\n      value = value.replace(/\\|/g, '\\\\$&')\r\n    }\r\n\r\n    return value\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}