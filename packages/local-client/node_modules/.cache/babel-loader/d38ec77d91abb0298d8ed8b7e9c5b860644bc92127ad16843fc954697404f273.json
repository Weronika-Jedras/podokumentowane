{"ast":null,"code":"(function (Prism) {\n  function literal(str) {\n    return function () {\n      return str;\n    };\n  }\n  var keyword = /\\b(?:align|allowzero|and|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/;\n  var IDENTIFIER = '\\\\b(?!' + keyword.source + ')(?!\\\\d)\\\\w+\\\\b';\n  var ALIGN = /align\\s*\\((?:[^()]|\\([^()]*\\))*\\)/.source;\n  var PREFIX_TYPE_OP = /(?:\\?|\\bpromise->|(?:\\[[^[\\]]*\\]|\\*(?!\\*)|\\*\\*)(?:\\s*<ALIGN>|\\s*const\\b|\\s*volatile\\b|\\s*allowzero\\b)*)/.source.replace(/<ALIGN>/g, literal(ALIGN));\n  var SUFFIX_EXPR = /(?:\\bpromise\\b|(?:\\berror\\.)?<ID>(?:\\.<ID>)*(?!\\s+<ID>))/.source.replace(/<ID>/g, literal(IDENTIFIER));\n  var TYPE = '(?!\\\\s)(?:!?\\\\s*(?:' + PREFIX_TYPE_OP + '\\\\s*)*' + SUFFIX_EXPR + ')+';\n\n  /*\r\n   * A simplified grammar for Zig compile time type literals:\r\n   *\r\n   * TypeExpr = ( \"!\"? PREFIX_TYPE_OP* SUFFIX_EXPR )+\r\n   *\r\n   * SUFFIX_EXPR = ( \\b \"promise\" \\b | ( \\b \"error\" \".\" )? IDENTIFIER ( \".\" IDENTIFIER )* (?! \\s+ IDENTIFIER ) )\r\n   *\r\n   * PREFIX_TYPE_OP = \"?\"\r\n   *                | \\b \"promise\" \"->\"\r\n   *                | ( \"[\" [^\\[\\]]* \"]\" | \"*\" | \"**\" ) ( ALIGN | \"const\" \\b | \"volatile\" \\b | \"allowzero\" \\b )*\r\n   *\r\n   * ALIGN = \"align\" \"(\" ( [^()] | \"(\" [^()]* \")\" )* \")\"\r\n   *\r\n   * IDENTIFIER = \\b (?! KEYWORD ) [a-zA-Z_] \\w* \\b\r\n   *\r\n  */\n\n  Prism.languages.zig = {\n    'comment': [{\n      pattern: /\\/{3}.*/,\n      alias: 'doc-comment'\n    }, /\\/{2}.*/],\n    'string': [{\n      // \"string\" and c\"string\"\n      pattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // multiline strings and c-strings\n      pattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // characters 'a', '\\n', '\\xFF', '\\u{10FFFF}'\n      pattern: /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'builtin': /\\B@(?!\\d)\\w+(?=\\s*\\()/,\n    'label': {\n      pattern: /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,\n      lookbehind: true\n    },\n    'class-name': [\n    // const Foo = struct {};\n    /\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/, {\n      // const x: i32 = 9;\n      // var x: Bar;\n      // fn foo(x: bool, y: f32) void {}\n      pattern: RegExp(/(:\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?[=;,)])|<TYPE>(?=\\s*(?:<ALIGN>\\s*)?\\{)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))),\n      lookbehind: true,\n      inside: null // see below\n    }, {\n      // extern fn foo(x: f64) f64; (optional alignment)\n      pattern: RegExp(/(\\)\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?;)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))),\n      lookbehind: true,\n      inside: null // see below\n    }],\n\n    'builtin-types': {\n      pattern: /\\b(?:anyerror|bool|c_u?(?:short|int|long|longlong)|c_longdouble|c_void|comptime_(?:float|int)|[iu](?:8|16|32|64|128|size)|f(?:16|32|64|128)|noreturn|type|void)\\b/,\n      alias: 'keyword'\n    },\n    'keyword': keyword,\n    'function': /\\b(?!\\d)\\w+(?=\\s*\\()/,\n    'number': /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'operator': /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,\n    'punctuation': /[.:,;(){}[\\]]/\n  };\n  Prism.languages.zig['class-name'].forEach(function (obj) {\n    if (obj.inside === null) {\n      obj.inside = Prism.languages.zig;\n    }\n  });\n})(Prism);","map":{"version":3,"names":["Prism","literal","str","keyword","IDENTIFIER","source","ALIGN","PREFIX_TYPE_OP","replace","SUFFIX_EXPR","TYPE","languages","zig","pattern","alias","lookbehind","greedy","RegExp","inside","forEach","obj"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-zig.js"],"sourcesContent":["(function (Prism) {\r\n\r\n\tfunction literal(str) {\r\n\t\treturn function () { return str; };\r\n\t}\r\n\r\n\tvar keyword = /\\b(?:align|allowzero|and|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/;\r\n\r\n\tvar IDENTIFIER = '\\\\b(?!' + keyword.source + ')(?!\\\\d)\\\\w+\\\\b';\r\n\tvar ALIGN = /align\\s*\\((?:[^()]|\\([^()]*\\))*\\)/.source;\r\n\tvar PREFIX_TYPE_OP = /(?:\\?|\\bpromise->|(?:\\[[^[\\]]*\\]|\\*(?!\\*)|\\*\\*)(?:\\s*<ALIGN>|\\s*const\\b|\\s*volatile\\b|\\s*allowzero\\b)*)/.source.replace(/<ALIGN>/g, literal(ALIGN));\r\n\tvar SUFFIX_EXPR = /(?:\\bpromise\\b|(?:\\berror\\.)?<ID>(?:\\.<ID>)*(?!\\s+<ID>))/.source.replace(/<ID>/g, literal(IDENTIFIER));\r\n\tvar TYPE = '(?!\\\\s)(?:!?\\\\s*(?:' + PREFIX_TYPE_OP + '\\\\s*)*' + SUFFIX_EXPR + ')+';\r\n\r\n\t/*\r\n\t * A simplified grammar for Zig compile time type literals:\r\n\t *\r\n\t * TypeExpr = ( \"!\"? PREFIX_TYPE_OP* SUFFIX_EXPR )+\r\n\t *\r\n\t * SUFFIX_EXPR = ( \\b \"promise\" \\b | ( \\b \"error\" \".\" )? IDENTIFIER ( \".\" IDENTIFIER )* (?! \\s+ IDENTIFIER ) )\r\n\t *\r\n\t * PREFIX_TYPE_OP = \"?\"\r\n\t *                | \\b \"promise\" \"->\"\r\n\t *                | ( \"[\" [^\\[\\]]* \"]\" | \"*\" | \"**\" ) ( ALIGN | \"const\" \\b | \"volatile\" \\b | \"allowzero\" \\b )*\r\n\t *\r\n\t * ALIGN = \"align\" \"(\" ( [^()] | \"(\" [^()]* \")\" )* \")\"\r\n\t *\r\n\t * IDENTIFIER = \\b (?! KEYWORD ) [a-zA-Z_] \\w* \\b\r\n\t *\r\n\t*/\r\n\r\n\tPrism.languages.zig = {\r\n\t\t'comment': [\r\n\t\t\t{\r\n\t\t\t\tpattern: /\\/{3}.*/,\r\n\t\t\t\talias: 'doc-comment'\r\n\t\t\t},\r\n\t\t\t/\\/{2}.*/\r\n\t\t],\r\n\t\t'string': [\r\n\t\t\t{\r\n\t\t\t\t// \"string\" and c\"string\"\r\n\t\t\t\tpattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// multiline strings and c-strings\r\n\t\t\t\tpattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// characters 'a', '\\n', '\\xFF', '\\u{10FFFF}'\r\n\t\t\t\tpattern: /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true\r\n\t\t\t}\r\n\t\t],\r\n\t\t'builtin': /\\B@(?!\\d)\\w+(?=\\s*\\()/,\r\n\t\t'label': {\r\n\t\t\tpattern: /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'class-name': [\r\n\t\t\t// const Foo = struct {};\r\n\t\t\t/\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/,\r\n\t\t\t{\r\n\t\t\t\t// const x: i32 = 9;\r\n\t\t\t\t// var x: Bar;\r\n\t\t\t\t// fn foo(x: bool, y: f32) void {}\r\n\t\t\t\tpattern: RegExp(/(:\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?[=;,)])|<TYPE>(?=\\s*(?:<ALIGN>\\s*)?\\{)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))),\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: null // see below\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// extern fn foo(x: f64) f64; (optional alignment)\r\n\t\t\t\tpattern: RegExp(/(\\)\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?;)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))),\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: null // see below\r\n\t\t\t}\r\n\t\t],\r\n\t\t'builtin-types': {\r\n\t\t\tpattern: /\\b(?:anyerror|bool|c_u?(?:short|int|long|longlong)|c_longdouble|c_void|comptime_(?:float|int)|[iu](?:8|16|32|64|128|size)|f(?:16|32|64|128)|noreturn|type|void)\\b/,\r\n\t\t\talias: 'keyword'\r\n\t\t},\r\n\t\t'keyword': keyword,\r\n\t\t'function': /\\b(?!\\d)\\w+(?=\\s*\\()/,\r\n\t\t'number': /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,\r\n\t\t'boolean': /\\b(?:false|true)\\b/,\r\n\t\t'operator': /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,\r\n\t\t'punctuation': /[.:,;(){}[\\]]/\r\n\t};\r\n\r\n\tPrism.languages.zig['class-name'].forEach(function (obj) {\r\n\t\tif (obj.inside === null) {\r\n\t\t\tobj.inside = Prism.languages.zig;\r\n\t\t}\r\n\t});\r\n\r\n}(Prism));\r\n"],"mappings":"AAAC,WAAUA,KAAK,EAAE;EAEjB,SAASC,OAAOA,CAACC,GAAG,EAAE;IACrB,OAAO,YAAY;MAAE,OAAOA,GAAG;IAAE,CAAC;EACnC;EAEA,IAAIC,OAAO,GAAG,qVAAqV;EAEnW,IAAIC,UAAU,GAAG,QAAQ,GAAGD,OAAO,CAACE,MAAM,GAAG,iBAAiB;EAC9D,IAAIC,KAAK,GAAG,mCAAmC,CAACD,MAAM;EACtD,IAAIE,cAAc,GAAG,yGAAyG,CAACF,MAAM,CAACG,OAAO,CAAC,UAAU,EAAEP,OAAO,CAACK,KAAK,CAAC,CAAC;EACzK,IAAIG,WAAW,GAAG,0DAA0D,CAACJ,MAAM,CAACG,OAAO,CAAC,OAAO,EAAEP,OAAO,CAACG,UAAU,CAAC,CAAC;EACzH,IAAIM,IAAI,GAAG,qBAAqB,GAAGH,cAAc,GAAG,QAAQ,GAAGE,WAAW,GAAG,IAAI;;EAEjF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAECT,KAAK,CAACW,SAAS,CAACC,GAAG,GAAG;IACrB,SAAS,EAAE,CACV;MACCC,OAAO,EAAE,SAAS;MAClBC,KAAK,EAAE;IACR,CAAC,EACD,SAAS,CACT;IACD,QAAQ,EAAE,CACT;MACC;MACAD,OAAO,EAAE,mCAAmC;MAC5CE,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE;IACT,CAAC,EACD;MACC;MACAH,OAAO,EAAE,gDAAgD;MACzDE,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE;IACT,CAAC,EACD;MACC;MACAH,OAAO,EAAE,uEAAuE;MAChFE,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE;IACT,CAAC,CACD;IACD,SAAS,EAAE,uBAAuB;IAClC,OAAO,EAAE;MACRH,OAAO,EAAE,2EAA2E;MACpFE,UAAU,EAAE;IACb,CAAC;IACD,YAAY,EAAE;IACb;IACA,6EAA6E,EAC7E;MACC;MACA;MACA;MACAF,OAAO,EAAEI,MAAM,CAAC,yEAAyE,CAACZ,MAAM,CAACG,OAAO,CAAC,SAAS,EAAEP,OAAO,CAACS,IAAI,CAAC,CAAC,CAACF,OAAO,CAAC,UAAU,EAAEP,OAAO,CAACK,KAAK,CAAC,CAAC,CAAC;MACvKS,UAAU,EAAE,IAAI;MAChBG,MAAM,EAAE,IAAI,CAAC;IACd,CAAC,EACD;MACC;MACAL,OAAO,EAAEI,MAAM,CAAC,sCAAsC,CAACZ,MAAM,CAACG,OAAO,CAAC,SAAS,EAAEP,OAAO,CAACS,IAAI,CAAC,CAAC,CAACF,OAAO,CAAC,UAAU,EAAEP,OAAO,CAACK,KAAK,CAAC,CAAC,CAAC;MACpIS,UAAU,EAAE,IAAI;MAChBG,MAAM,EAAE,IAAI,CAAC;IACd,CAAC,CACD;;IACD,eAAe,EAAE;MAChBL,OAAO,EAAE,mKAAmK;MAC5KC,KAAK,EAAE;IACR,CAAC;IACD,SAAS,EAAEX,OAAO;IAClB,UAAU,EAAE,sBAAsB;IAClC,QAAQ,EAAE,kHAAkH;IAC5H,SAAS,EAAE,oBAAoB;IAC/B,UAAU,EAAE,4EAA4E;IACxF,aAAa,EAAE;EAChB,CAAC;EAEDH,KAAK,CAACW,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC,CAACO,OAAO,CAAC,UAAUC,GAAG,EAAE;IACxD,IAAIA,GAAG,CAACF,MAAM,KAAK,IAAI,EAAE;MACxBE,GAAG,CAACF,MAAM,GAAGlB,KAAK,CAACW,SAAS,CAACC,GAAG;IACjC;EACD,CAAC,CAAC;AAEH,CAAC,EAACZ,KAAK,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}