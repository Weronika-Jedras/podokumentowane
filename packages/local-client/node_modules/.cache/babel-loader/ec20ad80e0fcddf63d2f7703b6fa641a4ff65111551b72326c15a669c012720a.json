{"ast":null,"code":"// Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n// As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n\n(function (Prism) {\n  // PromQL Aggregation Operators\n  // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n  var aggregations = ['sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile'];\n\n  // PromQL vector matching + the by and without clauses\n  // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n  var vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without'];\n\n  // PromQL offset modifier\n  // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n  var offsetModifier = ['offset'];\n  var keywords = aggregations.concat(vectorMatching, offsetModifier);\n  Prism.languages.promql = {\n    'comment': {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true\n    },\n    'vector-match': {\n      // Match the comma-separated label lists inside vector matching:\n      pattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),\n      lookbehind: true,\n      inside: {\n        'label-key': {\n          pattern: /\\b[^,]*\\b/,\n          alias: 'attr-name'\n        },\n        'punctuation': /[(),]/\n      }\n    },\n    'context-labels': {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        'label-key': {\n          pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n          alias: 'attr-name'\n        },\n        'label-value': {\n          pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n          greedy: true,\n          alias: 'attr-value'\n        },\n        'punctuation': /\\{|\\}|=~?|![=~]|,/\n      }\n    },\n    'context-range': [{\n      pattern: /\\[[\\w\\s:]+\\]/,\n      // [1m]\n      inside: {\n        'punctuation': /\\[|\\]|:/,\n        'range-duration': {\n          pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n          alias: 'number'\n        }\n      }\n    }, {\n      pattern: /(\\boffset\\s+)\\w+/,\n      // offset 1m\n      lookbehind: true,\n      inside: {\n        'range-duration': {\n          pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n          alias: 'number'\n        }\n      }\n    }],\n    'keyword': new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n    'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    'number': /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n    'operator': /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|unless|or)\\b/i,\n    'punctuation': /[{};()`,.[\\]]/\n  };\n})(Prism);","map":{"version":3,"names":["Prism","aggregations","vectorMatching","offsetModifier","keywords","concat","languages","promql","pattern","lookbehind","RegExp","join","inside","alias","greedy"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-promql.js"],"sourcesContent":["// Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\r\n// As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\r\n\r\n(function (Prism) {\r\n\t// PromQL Aggregation Operators\r\n\t// (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\r\n\tvar aggregations = [\r\n\t\t'sum',\r\n\t\t'min',\r\n\t\t'max',\r\n\t\t'avg',\r\n\t\t'group',\r\n\t\t'stddev',\r\n\t\t'stdvar',\r\n\t\t'count',\r\n\t\t'count_values',\r\n\t\t'bottomk',\r\n\t\t'topk',\r\n\t\t'quantile'\r\n\t];\r\n\r\n\t// PromQL vector matching + the by and without clauses\r\n\t// (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\r\n\tvar vectorMatching = [\r\n\t\t'on',\r\n\t\t'ignoring',\r\n\t\t'group_right',\r\n\t\t'group_left',\r\n\t\t'by',\r\n\t\t'without',\r\n\t];\r\n\r\n\t// PromQL offset modifier\r\n\t// (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\r\n\tvar offsetModifier = ['offset'];\r\n\r\n\tvar keywords = aggregations.concat(vectorMatching, offsetModifier);\r\n\r\n\tPrism.languages.promql = {\r\n\t\t'comment': {\r\n\t\t\tpattern: /(^[ \\t]*)#.*/m,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'vector-match': {\r\n\t\t\t// Match the comma-separated label lists inside vector matching:\r\n\t\t\tpattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'label-key': {\r\n\t\t\t\t\tpattern: /\\b[^,]*\\b/,\r\n\t\t\t\t\talias: 'attr-name',\r\n\t\t\t\t},\r\n\t\t\t\t'punctuation': /[(),]/\r\n\t\t\t},\r\n\t\t},\r\n\t\t'context-labels': {\r\n\t\t\tpattern: /\\{[^{}]*\\}/,\r\n\t\t\tinside: {\r\n\t\t\t\t'label-key': {\r\n\t\t\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\r\n\t\t\t\t\talias: 'attr-name',\r\n\t\t\t\t},\r\n\t\t\t\t'label-value': {\r\n\t\t\t\t\tpattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\r\n\t\t\t\t\tgreedy: true,\r\n\t\t\t\t\talias: 'attr-value',\r\n\t\t\t\t},\r\n\t\t\t\t'punctuation': /\\{|\\}|=~?|![=~]|,/,\r\n\t\t\t},\r\n\t\t},\r\n\t\t'context-range': [\r\n\t\t\t{\r\n\t\t\t\tpattern: /\\[[\\w\\s:]+\\]/, // [1m]\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': /\\[|\\]|:/,\r\n\t\t\t\t\t'range-duration': {\r\n\t\t\t\t\t\tpattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\r\n\t\t\t\t\t\talias: 'number',\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpattern: /(\\boffset\\s+)\\w+/, // offset 1m\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'range-duration': {\r\n\t\t\t\t\t\tpattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\r\n\t\t\t\t\t\talias: 'number',\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\t'keyword': new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\r\n\t\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\r\n\t\t'number': /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\r\n\t\t'operator': /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|unless|or)\\b/i,\r\n\t\t'punctuation': /[{};()`,.[\\]]/,\r\n\t};\r\n}(Prism));\r\n"],"mappings":"AAAA;AACA;;AAEC,WAAUA,KAAK,EAAE;EACjB;EACA;EACA,IAAIC,YAAY,GAAG,CAClB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,cAAc,EACd,SAAS,EACT,MAAM,EACN,UAAU,CACV;;EAED;EACA;EACA,IAAIC,cAAc,GAAG,CACpB,IAAI,EACJ,UAAU,EACV,aAAa,EACb,YAAY,EACZ,IAAI,EACJ,SAAS,CACT;;EAED;EACA;EACA,IAAIC,cAAc,GAAG,CAAC,QAAQ,CAAC;EAE/B,IAAIC,QAAQ,GAAGH,YAAY,CAACI,MAAM,CAACH,cAAc,EAAEC,cAAc,CAAC;EAElEH,KAAK,CAACM,SAAS,CAACC,MAAM,GAAG;IACxB,SAAS,EAAE;MACVC,OAAO,EAAE,eAAe;MACxBC,UAAU,EAAE;IACb,CAAC;IACD,cAAc,EAAE;MACf;MACAD,OAAO,EAAE,IAAIE,MAAM,CAAC,MAAM,GAAGR,cAAc,CAACS,IAAI,CAAC,GAAG,CAAC,GAAG,mBAAmB,CAAC;MAC5EF,UAAU,EAAE,IAAI;MAChBG,MAAM,EAAE;QACP,WAAW,EAAE;UACZJ,OAAO,EAAE,WAAW;UACpBK,KAAK,EAAE;QACR,CAAC;QACD,aAAa,EAAE;MAChB;IACD,CAAC;IACD,gBAAgB,EAAE;MACjBL,OAAO,EAAE,YAAY;MACrBI,MAAM,EAAE;QACP,WAAW,EAAE;UACZJ,OAAO,EAAE,+BAA+B;UACxCK,KAAK,EAAE;QACR,CAAC;QACD,aAAa,EAAE;UACdL,OAAO,EAAE,oCAAoC;UAC7CM,MAAM,EAAE,IAAI;UACZD,KAAK,EAAE;QACR,CAAC;QACD,aAAa,EAAE;MAChB;IACD,CAAC;IACD,eAAe,EAAE,CAChB;MACCL,OAAO,EAAE,cAAc;MAAE;MACzBI,MAAM,EAAE;QACP,aAAa,EAAE,SAAS;QACxB,gBAAgB,EAAE;UACjBJ,OAAO,EAAE,8BAA8B;UACvCK,KAAK,EAAE;QACR;MACD;IACD,CAAC,EACD;MACCL,OAAO,EAAE,kBAAkB;MAAE;MAC7BC,UAAU,EAAE,IAAI;MAChBG,MAAM,EAAE;QACP,gBAAgB,EAAE;UACjBJ,OAAO,EAAE,8BAA8B;UACvCK,KAAK,EAAE;QACR;MACD;IACD,CAAC,CACD;IACD,SAAS,EAAE,IAAIH,MAAM,CAAC,QAAQ,GAAGN,QAAQ,CAACO,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,GAAG,CAAC;IAClE,UAAU,EAAE,uBAAuB;IACnC,QAAQ,EAAE,mFAAmF;IAC7F,UAAU,EAAE,kDAAkD;IAC9D,aAAa,EAAE;EAChB,CAAC;AACF,CAAC,EAACX,KAAK,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}