{"ast":null,"code":"Prism.languages.nim = {\n  'comment': /#.*/,\n  // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n  // Character literals are handled specifically to prevent issues with numeric type suffixes\n  'string': {\n    pattern: /(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,\n    greedy: true\n  },\n  // The negative look ahead prevents wrong highlighting of the .. operator\n  'number': /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n  'keyword': /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n  'function': {\n    pattern: /(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n    inside: {\n      'operator': /\\*$/\n    }\n  },\n  // We don't want to highlight operators inside backticks\n  'ignore': {\n    pattern: /`[^`\\r\\n]+`/,\n    inside: {\n      'punctuation': /`/\n    }\n  },\n  'operator': {\n    // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n    // but allow the slice operator .. to take precedence over them\n    // One can define his own operators in Nim so all combination of operators might be an operator.\n    pattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,\n    lookbehind: true\n  },\n  'punctuation': /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n};","map":{"version":3,"names":["Prism","languages","nim","pattern","greedy","inside","lookbehind"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-nim.js"],"sourcesContent":["Prism.languages.nim = {\r\n\t'comment': /#.*/,\r\n\t// Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\r\n\t// Character literals are handled specifically to prevent issues with numeric type suffixes\r\n\t'string': {\r\n\t\tpattern: /(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,\r\n\t\tgreedy: true\r\n\t},\r\n\t// The negative look ahead prevents wrong highlighting of the .. operator\r\n\t'number': /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\r\n\t'keyword': /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\r\n\t'function': {\r\n\t\tpattern: /(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\r\n\t\tinside: {\r\n\t\t\t'operator': /\\*$/\r\n\t\t}\r\n\t},\r\n\t// We don't want to highlight operators inside backticks\r\n\t'ignore': {\r\n\t\tpattern: /`[^`\\r\\n]+`/,\r\n\t\tinside: {\r\n\t\t\t'punctuation': /`/\r\n\t\t}\r\n\t},\r\n\t'operator': {\r\n\t\t// Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\r\n\t\t// but allow the slice operator .. to take precedence over them\r\n\t\t// One can define his own operators in Nim so all combination of operators might be an operator.\r\n\t\tpattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'punctuation': /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\r\n};\r\n"],"mappings":"AAAAA,KAAK,CAACC,SAAS,CAACC,GAAG,GAAG;EACrB,SAAS,EAAE,KAAK;EAChB;EACA;EACA,QAAQ,EAAE;IACTC,OAAO,EAAE,2IAA2I;IACpJC,MAAM,EAAE;EACT,CAAC;EACD;EACA,QAAQ,EAAE,gGAAgG;EAC1G,SAAS,EAAE,6VAA6V;EACxW,UAAU,EAAE;IACXD,OAAO,EAAE,oFAAoF;IAC7FE,MAAM,EAAE;MACP,UAAU,EAAE;IACb;EACD,CAAC;EACD;EACA,QAAQ,EAAE;IACTF,OAAO,EAAE,aAAa;IACtBE,MAAM,EAAE;MACP,aAAa,EAAE;IAChB;EACD,CAAC;EACD,UAAU,EAAE;IACX;IACA;IACA;IACAF,OAAO,EAAE,iJAAiJ;IAC1JG,UAAU,EAAE;EACb,CAAC;EACD,aAAa,EAAE;AAChB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}