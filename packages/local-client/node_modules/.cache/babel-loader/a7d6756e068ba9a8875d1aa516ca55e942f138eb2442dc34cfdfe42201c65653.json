{"ast":null,"code":"Prism.languages.elixir = {\n  'doc': {\n    pattern: /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n    inside: {\n      'attribute': /^@\\w+/,\n      'string': /['\"][\\s\\S]+/\n    }\n  },\n  'comment': {\n    pattern: /#.*/m,\n    greedy: true\n  },\n  // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n  'regex': {\n    pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n    greedy: true\n  },\n  'string': [{\n    // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n    pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n    greedy: true,\n    inside: {\n      // See interpolation below\n    }\n  }, {\n    pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n    greedy: true,\n    inside: {\n      // See interpolation below\n    }\n  }, {\n    // Multi-line strings are allowed\n    pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      // See interpolation below\n    }\n  }],\n  'atom': {\n    // Look-behind prevents bad highlighting of the :: operator\n    pattern: /(^|[^:]):\\w+/,\n    lookbehind: true,\n    alias: 'symbol'\n  },\n  'module': {\n    pattern: /\\b[A-Z]\\w*\\b/,\n    alias: 'class-name'\n  },\n  // Look-ahead prevents bad highlighting of the :: operator\n  'attr-name': /\\b\\w+\\??:(?!:)/,\n  'argument': {\n    // Look-behind prevents bad highlighting of the && operator\n    pattern: /(^|[^&])&\\d+/,\n    lookbehind: true,\n    alias: 'variable'\n  },\n  'attribute': {\n    pattern: /@\\w+/,\n    alias: 'variable'\n  },\n  'function': /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n  'number': /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n  'keyword': /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n  'boolean': /\\b(?:true|false|nil)\\b/,\n  'operator': [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n    // We don't want to match <<\n    pattern: /([^<])<(?!<)/,\n    lookbehind: true\n  }, {\n    // We don't want to match >>\n    pattern: /([^>])>(?!>)/,\n    lookbehind: true\n  }],\n  'punctuation': /<<|>>|[.,%\\[\\]{}()]/\n};\nPrism.languages.elixir.string.forEach(function (o) {\n  o.inside = {\n    'interpolation': {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        'delimiter': {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.elixir\n      }\n    }\n  };\n});","map":{"version":3,"names":["Prism","languages","elixir","pattern","inside","greedy","lookbehind","alias","string","forEach","o","rest"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/node_modules/prismjs/components/prism-elixir.js"],"sourcesContent":["Prism.languages.elixir = {\r\n\t'doc': {\r\n\t\tpattern: /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\r\n\t\tinside: {\r\n\t\t\t'attribute': /^@\\w+/,\r\n\t\t\t'string': /['\"][\\s\\S]+/\r\n\t\t}\r\n\t},\r\n\t'comment': {\r\n\t\tpattern: /#.*/m,\r\n\t\tgreedy: true\r\n\t},\r\n\t// ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\r\n\t'regex': {\r\n\t\tpattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'string': [\r\n\t\t{\r\n\t\t\t// ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\r\n\t\t\tpattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t// See interpolation below\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t// See interpolation below\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t// Multi-line strings are allowed\r\n\t\t\tpattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t// See interpolation below\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\t'atom': {\r\n\t\t// Look-behind prevents bad highlighting of the :: operator\r\n\t\tpattern: /(^|[^:]):\\w+/,\r\n\t\tlookbehind: true,\r\n\t\talias: 'symbol'\r\n\t},\r\n\t'module': {\r\n\t\tpattern: /\\b[A-Z]\\w*\\b/,\r\n\t\talias: 'class-name'\r\n\t},\r\n\t// Look-ahead prevents bad highlighting of the :: operator\r\n\t'attr-name': /\\b\\w+\\??:(?!:)/,\r\n\t'argument': {\r\n\t\t// Look-behind prevents bad highlighting of the && operator\r\n\t\tpattern: /(^|[^&])&\\d+/,\r\n\t\tlookbehind: true,\r\n\t\talias: 'variable'\r\n\t},\r\n\t'attribute': {\r\n\t\tpattern: /@\\w+/,\r\n\t\talias: 'variable'\r\n\t},\r\n\t'function': /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\r\n\t'number': /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\r\n\t'keyword': /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\r\n\t'boolean': /\\b(?:true|false|nil)\\b/,\r\n\t'operator': [\r\n\t\t/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\r\n\t\t{\r\n\t\t\t// We don't want to match <<\r\n\t\t\tpattern: /([^<])<(?!<)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t{\r\n\t\t\t// We don't want to match >>\r\n\t\t\tpattern: /([^>])>(?!>)/,\r\n\t\t\tlookbehind: true\r\n\t\t}\r\n\t],\r\n\t'punctuation': /<<|>>|[.,%\\[\\]{}()]/\r\n};\r\n\r\nPrism.languages.elixir.string.forEach(function (o) {\r\n\to.inside = {\r\n\t\t'interpolation': {\r\n\t\t\tpattern: /#\\{[^}]+\\}/,\r\n\t\t\tinside: {\r\n\t\t\t\t'delimiter': {\r\n\t\t\t\t\tpattern: /^#\\{|\\}$/,\r\n\t\t\t\t\talias: 'punctuation'\r\n\t\t\t\t},\r\n\t\t\t\trest: Prism.languages.elixir\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n});\r\n"],"mappings":"AAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,GAAG;EACxB,KAAK,EAAE;IACNC,OAAO,EAAE,4FAA4F;IACrGC,MAAM,EAAE;MACP,WAAW,EAAE,OAAO;MACpB,QAAQ,EAAE;IACX;EACD,CAAC;EACD,SAAS,EAAE;IACVD,OAAO,EAAE,MAAM;IACfE,MAAM,EAAE;EACT,CAAC;EACD;EACA,OAAO,EAAE;IACRF,OAAO,EAAE,4LAA4L;IACrME,MAAM,EAAE;EACT,CAAC;EACD,QAAQ,EAAE,CACT;IACC;IACAF,OAAO,EAAE,gNAAgN;IACzNE,MAAM,EAAE,IAAI;IACZD,MAAM,EAAE;MACP;IAAA;EAEF,CAAC,EACD;IACCD,OAAO,EAAE,qBAAqB;IAC9BE,MAAM,EAAE,IAAI;IACZD,MAAM,EAAE;MACP;IAAA;EAEF,CAAC,EACD;IACC;IACAD,OAAO,EAAE,+CAA+C;IACxDE,MAAM,EAAE,IAAI;IACZD,MAAM,EAAE;MACP;IAAA;EAEF,CAAC,CACD;EACD,MAAM,EAAE;IACP;IACAD,OAAO,EAAE,cAAc;IACvBG,UAAU,EAAE,IAAI;IAChBC,KAAK,EAAE;EACR,CAAC;EACD,QAAQ,EAAE;IACTJ,OAAO,EAAE,cAAc;IACvBI,KAAK,EAAE;EACR,CAAC;EACD;EACA,WAAW,EAAE,gBAAgB;EAC7B,UAAU,EAAE;IACX;IACAJ,OAAO,EAAE,cAAc;IACvBG,UAAU,EAAE,IAAI;IAChBC,KAAK,EAAE;EACR,CAAC;EACD,WAAW,EAAE;IACZJ,OAAO,EAAE,MAAM;IACfI,KAAK,EAAE;EACR,CAAC;EACD,UAAU,EAAE,qDAAqD;EACjE,QAAQ,EAAE,iEAAiE;EAC3E,SAAS,EAAE,iNAAiN;EAC5N,SAAS,EAAE,wBAAwB;EACnC,UAAU,EAAE,CACX,0FAA0F,EAC1F;IACC;IACAJ,OAAO,EAAE,cAAc;IACvBG,UAAU,EAAE;EACb,CAAC,EACD;IACC;IACAH,OAAO,EAAE,cAAc;IACvBG,UAAU,EAAE;EACb,CAAC,CACD;EACD,aAAa,EAAE;AAChB,CAAC;AAEDN,KAAK,CAACC,SAAS,CAACC,MAAM,CAACM,MAAM,CAACC,OAAO,CAAC,UAAUC,CAAC,EAAE;EAClDA,CAAC,CAACN,MAAM,GAAG;IACV,eAAe,EAAE;MAChBD,OAAO,EAAE,YAAY;MACrBC,MAAM,EAAE;QACP,WAAW,EAAE;UACZD,OAAO,EAAE,UAAU;UACnBI,KAAK,EAAE;QACR,CAAC;QACDI,IAAI,EAAEX,KAAK,CAACC,SAAS,CAACC;MACvB;IACD;EACD,CAAC;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}