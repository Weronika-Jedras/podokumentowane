{"ast":null,"code":"import { ActionType } from \"../action-types\";\nimport bundle from \"../../bundler\";\nimport axios from \"axios\";\nexport const updateCell = (id, content) => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content\n    }\n  };\n};\nexport const deleteCell = id => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id\n  };\n};\nexport const moveCell = (id, direction) => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction\n    }\n  };\n};\nexport const insertCellAfter = (id, cellType) => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType\n    }\n  };\n};\nexport const createBundle = (cellId, input) => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId\n      }\n    });\n    const result = await bundle(input);\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result\n      }\n    });\n  };\n};\nexport const fetchCells = () => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.FETCH_CELLS\n    });\n    try {\n      const {\n        data\n      } = await axios.get('/cells');\n      dispatch({\n        type: ActionType.FETCH_CELLS_COMPLETE,\n        payload: data\n      });\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch({\n          type: ActionType.FETCH_CELLS_ERROR,\n          payload: err.message\n        });\n      }\n    }\n  };\n};\nexport const saveCells = () => {\n  return async (dispatch, getState) => {\n    const {\n      cells: {\n        data,\n        order\n      }\n    } = getState();\n    const cells = order.map(id => data[id]);\n    try {\n      await axios.post('/cells', {\n        cells\n      });\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch({\n          type: ActionType.SAVE_CELLS_ERROR,\n          payload: err.message\n        });\n      }\n      ;\n    }\n  };\n};","map":{"version":3,"names":["ActionType","bundle","axios","updateCell","id","content","type","UPDATE_CELL","payload","deleteCell","DELETE_CELL","moveCell","direction","MOVE_CELL","insertCellAfter","cellType","INSERT_CELL_AFTER","createBundle","cellId","input","dispatch","BUNDLE_START","result","BUNDLE_COMPLETE","fetchCells","FETCH_CELLS","data","get","FETCH_CELLS_COMPLETE","err","Error","FETCH_CELLS_ERROR","message","saveCells","getState","cells","order","map","post","SAVE_CELLS_ERROR"],"sources":["C:/Users/Maya/Desktop/AWT/podokumentowane/podokumentowane/packages/local-client/src/state/action-creators/index.ts"],"sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { ActionType } from \"../action-types\";\r\nimport { \r\n  Action,\r\n  UpdateCellAction, \r\n  DeleteCellAction, \r\n  MoveCellAction, \r\n  InsertCellAfterAction,\r\n  Direction \r\n  } from \"../actions\";\r\nimport { Cell, CellTypes } from \"../cell\";\r\nimport bundle from \"../../bundler\";\r\nimport axios from \"axios\";\r\nimport { RootState } from \"../reducers\";\r\n\r\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\r\n  return {\r\n    type: ActionType.UPDATE_CELL,\r\n    payload: {\r\n      id,\r\n      content\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteCell = (id: string): DeleteCellAction => {\r\n  return {\r\n    type: ActionType.DELETE_CELL,\r\n    payload: id\r\n  };\r\n};\r\n\r\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\r\n  return {\r\n    type: ActionType.MOVE_CELL,\r\n    payload: {\r\n      id,\r\n      direction\r\n    }\r\n  };\r\n};\r\n\r\nexport const insertCellAfter = (id: string | null, cellType: CellTypes): InsertCellAfterAction => {\r\n  return {\r\n    type: ActionType.INSERT_CELL_AFTER,\r\n    payload: {\r\n      id,\r\n      type: cellType\r\n    }\r\n  };\r\n};\r\n\r\nexport const createBundle = (cellId: string, input: string) => {\r\n  return async (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.BUNDLE_START,\r\n      payload: {\r\n        cellId,\r\n      }\r\n    })\r\n\r\n    const result = await bundle(input);\r\n\r\n    dispatch({\r\n      type: ActionType.BUNDLE_COMPLETE,\r\n      payload: {\r\n        cellId,\r\n        bundle: result\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const fetchCells = () => {\r\n  return async (dispatch: Dispatch<Action>) => {\r\n    dispatch({type: ActionType.FETCH_CELLS});\r\n\r\n    try {\r\n      const { data }: {data: Cell []} = await axios.get('/cells');\r\n\r\n      dispatch({\r\n        type: ActionType.FETCH_CELLS_COMPLETE, \r\n        payload: data,\r\n      });\r\n    } catch (err) {\r\n    if (err instanceof Error) {\r\n      dispatch({\r\n        type: ActionType.FETCH_CELLS_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }}}}\r\n\r\nexport const saveCells = () => {\r\n  return async (dispatch: Dispatch<Action>, getState: () => RootState) => {\r\n    const { cells: {data, order}} = getState();\r\n\r\n    const cells = order.map((id) => data[id]);\r\n\r\n    try {\r\n    await axios.post('/cells', {cells});\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        dispatch({\r\n          type: ActionType.SAVE_CELLS_ERROR,\r\n          payload: err.message,\r\n        });\r\n  };\r\n}\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}